===================
Test a model using a lambda function
===================
// Make sure lambda works correctly.
fun test_lambda(a: Int): Int {
  let (x : (Int,Int):Int = lambda:Int(a: Int, b: Int) { a+b }) in {
     x(a, 8)
   }
}

val t: Int = test_lambda(3)/2

// And check that recursion in functions works.
fun fact(n: Int): Int {
  if (n == 0) {
     1
  } else {
     n * fact(n - 1)
  }
}

produce("n") {
  print(["Factorial of 5 = ", fact(5)])
}


produce("t") {
   t
}
----

    (source_file
      (comment)
      (definition
        (funDef
          (id)
          (params
            (param
              (id)
              (simpleType
                (id))))
          (simpleType
            (id))
          (letExpr
            (bindings
              (binding
                (id)
                (funType
                  (types
                    (simpleType
                      (id))
                    (simpleType
                      (id)))
                  (simpleType
                    (id)))
                (lambda
                  (simpleType
                    (id))
                  (params
                    (param
                      (id)
                      (simpleType
                        (id)))
                    (param
                      (id)
                      (simpleType
                        (id))))
                  (add
                    (ref
                      (id))
                    (addOp)
                    (ref
                      (id))))))
            (funCall
              (ref
                (id))
              (exprs
                (ref
                  (id))
                (litInt))))))
      (definition
        (varDef
          (id)
          (simpleType
            (id))
          (multiply
            (funCall
              (ref
                (id))
              (exprs
                (litInt)))
            (multOp)
            (litInt))))
      (comment)
      (definition
        (funDef
          (id)
          (params
            (param
              (id)
              (simpleType
                (id))))
          (simpleType
            (id))
          (cond
            (condClause
              (compare
                (ref
                  (id))
                (compOp)
                (litInt))
              (litInt))
            (multiply
              (ref
                (id))
              (multOp)
              (funCall
                (ref
                  (id))
                (exprs
                  (add
                    (ref
                      (id))
                    (addOp)
                    (litInt))))))))
      (product
        (litStr)
        (funCall
          (ref
            (id))
          (exprs
            (array
              (exprs
                (litStr)
                (funCall
                  (ref
                    (id))
                  (exprs
                    (litInt))))))))
      (product
        (litStr)
        (ref
          (id))))
