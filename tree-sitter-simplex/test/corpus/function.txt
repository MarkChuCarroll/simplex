=================================
recursive function definition
=================================
fun fact(n: Int): Int do
  if n == 0 then
    1
  else
    n * fact(n-1)
  end
end

produce(it) do
  fact(5)
end
------
 (source_file
      (definition
        (funDef
          (id)
          (params
            (param
              (id)
              (simpleType
                (id))))
          (simpleType
            (id))
          (cond
            (condClause
              (compare
                (ref
                  (id))
                (compOp)
                (litint))
              (litint))
            (multiply
              (ref
                (id))
              (multOp)
              (funCall
                (ref
                  (id))
                (exprs
                  (add
                    (ref
                      (id))
                    (addOp)
                    (litint))))))))
      (product
        (id)
        (funCall
          (ref
            (id))
          (exprs
            (litint)))))

=================================
function call with method call
=================================
fun use_meth(x: Int): Float do
   x->f()
end

meth Int->f(): Float do
   self->float()
end

produce(result) do
   print([3->f(), use_meth(4)])
end
------
  (source_file
      (definition
        (funDef
          (id)
          (params
            (param
              (id)
              (simpleType
                (id))))
          (simpleType
            (id))
          (methodCall
            (ref
              (id))
            (id))))
      (definition
        (methDef
          (simpleType
            (id))
          (id)
          (simpleType
            (id))
          (methodCall
            (ref
              (id))
            (id))))
      (product
        (id)
        (funCall
          (ref
            (id))
          (exprs
            (array
              (exprs
                (methodCall
                  (litint)
                  (id))
                (funCall
                  (ref
                    (id))
                  (exprs
                    (litint)))))))))
