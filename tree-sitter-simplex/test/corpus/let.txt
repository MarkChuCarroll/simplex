====================
function with let
====================
// comment
fun test(x: Float, y: Int): String {
  let local: String = x + x
  print([local, y2])
}

produce("str") {
   test_fun("abc", 27)
}
---
(source_file
  (comment)
  (definition
    (funDef
      (id)
        (params
          (param
            (id)
            (simpleType
              (id)))
          (param
            (id)
            (simpleType
              (id))))
        (simpleType
          (id))
        (letExpr
          (id)
          (simpleType
            (id))
          (add
            (ref
              (id))
            (addOp)
            (ref
              (id))))
        (funCall
          (ref
            (id))
          (exprs
            (array
              (exprs
                (ref
                  (id))
                (ref
                  (id))))))))
  (product
    (litStr)
    (funCall
      (ref
        (id))
      (exprs
        (litStr)
        (litInt)))))

====================================
Function with let inferred types
====================================
// comment
fun test(x: Float, y: Int): String {
  let local = x + x
  print([local, y2])
}

produce("str") {
   test_fun("abc", 27)
}
-------
(source_file
  (comment)
  (definition
    (funDef
      (id)
      (params
        (param
          (id)
          (simpleType
            (id)))
        (param
          (id)
          (simpleType
            (id))))
      (simpleType
        (id))
      (letExpr
        (id)
        (add
          (ref
            (id))
          (addOp)
          (ref
            (id))))
      (funCall
        (ref
          (id))
        (exprs
          (array
            (exprs
              (ref
                (id))
              (ref
                (id))))))))
  (product
    (litStr)
    (funCall
      (ref
        (id))
      (exprs
        (litStr)
        (litInt)))))
