/*
 * Copyright 2024 Mark C. Chu-Carroll
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.goodmath.simplex

import com.github.ajalt.clikt.testing.test
import org.junit.jupiter.params.ParameterizedTest
import org.junit.jupiter.params.provider.MethodSource
import java.io.File
import java.nio.file.Files
import java.nio.file.Path
import java.util.stream.Stream
import kotlin.io.path.Path
import kotlin.io.path.readText
import kotlin.test.assertEquals

/**
 * A test that runs a collection of Simplex scripts, and verifies
 * that they behave correctly.
 *
 * Each directory under src/tests/resources/scripts is a test. Within
 * each directory 'foo':
 * - foo.s3d: the script to run as a test.
 * - foo-out-*: the output files generated by running the script.
 * - stdout.txt: the expected output on stdout from running the test.
 * - stderr.txt: the expected output on stderr from running the test.
 *
 */
class ExecutionTest {

    /**
     * One of the tests.
     *
     */
    class TestScript(val prefix: String, val name: String) {
        fun program(): Path {
            return Path("$prefix/$name/$name.s3d")
        }

        fun expected(): Map<String, Path> {
            val dir = Path("$prefix/$name")
            val result = HashMap<String, Path>()
            for (p in dir.toFile().listFiles()!!) {
                if (p.name.startsWith("$name-out-")) {
                    val key = p.name.toString().substring("$name-out-".length)
                    result[key] = p.toPath()
                }
            }
            return result
        }

        fun actual(testDir: Path): Map<String, Path> {
            val result = HashMap<String, Path>()
            for (p in testDir.toFile().listFiles()!!) {
                if (p.name.startsWith("$name-out-")) {
                    val key = p.name.toString().substring("$name-out-".length)
                    result[key] = p.toPath()
                }
            }
            return result
        }

        fun run() {
            System.out.println("Testing script '$name.s3d'")
            val cmd = Simplex()

            val tmpDir = Files.createTempDirectory("test-$name")
            val out = cmd.test("--prefix=$tmpDir/$name-out", "--verbosity=2", program().toString())
            val exp = expected()
            val act = actual(tmpDir)
            val stdout = Path("$prefix/$name/stdout.txt").readText()
            assertEquals(stdout, out.stdout)
            val stderr = Path("$prefix/$name/stderr.txt").readText()
            assertEquals(stderr, out.stderr)
            assertEquals(exp.keys, act.keys)
            for (k in exp.keys) {
                val expTxt = exp[k]?.readText()!!
                val actTxt =  act[k]?.readText()!!
                assertEquals(expTxt, actTxt, "Output $k")
            }
        }
    }

    @ParameterizedTest
    @MethodSource("scripts")
    fun runScriptTest(scriptDir: String) {
        val tc = TestScript(prefix, scriptDir)
        tc.run()
    }

    companion object {
        val prefix = "./src/test/resources/scripts"

        @JvmStatic
        fun scripts(): Stream<String> {
            return (File(prefix).listFiles()!!.map { it.name }).stream()
        }
    }
}
