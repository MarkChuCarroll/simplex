/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.2.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


#define SWIG_VERSION 0x040201
#define SWIGJAVA

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif

#if defined(__cplusplus) && __cplusplus >=201103L
# define SWIG_NULLPTR nullptr
#else
# define SWIG_NULLPTR NULL
#endif 

/* -----------------------------------------------------------------------------
 * swigcompat.swg
 *
 * Macros to provide support compatibility with older C and C++ standards.
 * ----------------------------------------------------------------------------- */

/* C99 and C++11 should provide snprintf, but define SWIG_NO_SNPRINTF
 * if you're missing it.
 */
#if ((defined __STDC_VERSION__ && __STDC_VERSION__ >= 199901L) || \
     (defined __cplusplus && __cplusplus >= 201103L) || \
     defined SWIG_HAVE_SNPRINTF) && \
    !defined SWIG_NO_SNPRINTF
# define SWIG_snprintf(O,S,F,A) snprintf(O,S,F,A)
# define SWIG_snprintf2(O,S,F,A,B) snprintf(O,S,F,A,B)
#else
/* Fallback versions ignore the buffer size, but most of our uses either have a
 * fixed maximum possible size or dynamically allocate a buffer that's large
 * enough.
 */
# define SWIG_snprintf(O,S,F,A) sprintf(O,F,A)
# define SWIG_snprintf2(O,S,F,A,B) sprintf(O,F,A,B)
#endif


#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1,
  SWIG_JavaIOException,
  SWIG_JavaRuntimeException,
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError,
  SWIG_JavaIllegalStateException,
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { SWIG_JavaIllegalStateException, "java/lang/IllegalStateException" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) do { if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } } while (0)


#ifdef __cplusplus
#include <utility>
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigSmartPointer {
    T *ptr;
    SwigSmartPointer(T *p) : ptr(p) { }
    ~SwigSmartPointer() { delete ptr; }
    SwigSmartPointer& operator=(SwigSmartPointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
    void reset(T *p) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = p; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigSmartPointer tmp(new T(t)); pointer = tmp; return *this; }
#if __cplusplus >=201103L
  SwigValueWrapper& operator=(T&& t) { SwigSmartPointer tmp(new T(std::move(t))); pointer = tmp; return *this; }
  operator T&&() const { return std::move(*pointer.ptr); }
#else
  operator T&() const { return *pointer.ptr; }
#endif
  T *operator&() const { return pointer.ptr; }
  static void reset(SwigValueWrapper& t, T *p) { t.pointer.reset(p); }
};

/*
 * SwigValueInit() is a generic initialisation solution as the following approach:
 * 
 *       T c_result = T();
 * 
 * doesn't compile for all types for example:
 * 
 *       unsigned int c_result = unsigned int();
 */
template <typename T> T SwigValueInit() {
  return T();
}

#if __cplusplus >=201103L
# define SWIG_STD_MOVE(OBJ) std::move(OBJ)
#else
# define SWIG_STD_MOVE(OBJ) OBJ
#endif

#endif


#include "../c/include/manifoldc.h"
#include "../c/include/types.h"


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_ManifoldManifoldPair_1first_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ManifoldManifoldPair *arg1 = (ManifoldManifoldPair *) 0 ;
  ManifoldManifold *arg2 = (ManifoldManifold *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ManifoldManifoldPair **)&jarg1; 
  arg2 = *(ManifoldManifold **)&jarg2; 
  if (arg1) (arg1)->first = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_ManifoldManifoldPair_1first_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ManifoldManifoldPair *arg1 = (ManifoldManifoldPair *) 0 ;
  ManifoldManifold *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ManifoldManifoldPair **)&jarg1; 
  result = (ManifoldManifold *) ((arg1)->first);
  *(ManifoldManifold **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_ManifoldManifoldPair_1second_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ManifoldManifoldPair *arg1 = (ManifoldManifoldPair *) 0 ;
  ManifoldManifold *arg2 = (ManifoldManifold *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ManifoldManifoldPair **)&jarg1; 
  arg2 = *(ManifoldManifold **)&jarg2; 
  if (arg1) (arg1)->second = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_ManifoldManifoldPair_1second_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ManifoldManifoldPair *arg1 = (ManifoldManifoldPair *) 0 ;
  ManifoldManifold *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ManifoldManifoldPair **)&jarg1; 
  result = (ManifoldManifold *) ((arg1)->second);
  *(ManifoldManifold **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_new_1ManifoldManifoldPair(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ManifoldManifoldPair *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ManifoldManifoldPair *)new ManifoldManifoldPair();
  *(ManifoldManifoldPair **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_delete_1ManifoldManifoldPair(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ManifoldManifoldPair *arg1 = (ManifoldManifoldPair *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ManifoldManifoldPair **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_ManifoldVec2_1x_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  ManifoldVec2 *arg1 = (ManifoldVec2 *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ManifoldVec2 **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->x = arg2;
}


SWIGEXPORT jfloat JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_ManifoldVec2_1x_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  ManifoldVec2 *arg1 = (ManifoldVec2 *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ManifoldVec2 **)&jarg1; 
  result = (float) ((arg1)->x);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_ManifoldVec2_1y_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  ManifoldVec2 *arg1 = (ManifoldVec2 *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ManifoldVec2 **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->y = arg2;
}


SWIGEXPORT jfloat JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_ManifoldVec2_1y_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  ManifoldVec2 *arg1 = (ManifoldVec2 *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ManifoldVec2 **)&jarg1; 
  result = (float) ((arg1)->y);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_new_1ManifoldVec2(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ManifoldVec2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ManifoldVec2 *)new ManifoldVec2();
  *(ManifoldVec2 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_delete_1ManifoldVec2(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ManifoldVec2 *arg1 = (ManifoldVec2 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ManifoldVec2 **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_ManifoldVec3_1x_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  ManifoldVec3 *arg1 = (ManifoldVec3 *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ManifoldVec3 **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->x = arg2;
}


SWIGEXPORT jfloat JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_ManifoldVec3_1x_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  ManifoldVec3 *arg1 = (ManifoldVec3 *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ManifoldVec3 **)&jarg1; 
  result = (float) ((arg1)->x);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_ManifoldVec3_1y_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  ManifoldVec3 *arg1 = (ManifoldVec3 *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ManifoldVec3 **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->y = arg2;
}


SWIGEXPORT jfloat JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_ManifoldVec3_1y_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  ManifoldVec3 *arg1 = (ManifoldVec3 *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ManifoldVec3 **)&jarg1; 
  result = (float) ((arg1)->y);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_ManifoldVec3_1z_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  ManifoldVec3 *arg1 = (ManifoldVec3 *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ManifoldVec3 **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->z = arg2;
}


SWIGEXPORT jfloat JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_ManifoldVec3_1z_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  ManifoldVec3 *arg1 = (ManifoldVec3 *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ManifoldVec3 **)&jarg1; 
  result = (float) ((arg1)->z);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_new_1ManifoldVec3(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ManifoldVec3 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ManifoldVec3 *)new ManifoldVec3();
  *(ManifoldVec3 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_delete_1ManifoldVec3(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ManifoldVec3 *arg1 = (ManifoldVec3 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ManifoldVec3 **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_ManifoldIVec3_1x_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ManifoldIVec3 *arg1 = (ManifoldIVec3 *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ManifoldIVec3 **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->x = arg2;
}


SWIGEXPORT jint JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_ManifoldIVec3_1x_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ManifoldIVec3 *arg1 = (ManifoldIVec3 *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ManifoldIVec3 **)&jarg1; 
  result = (int) ((arg1)->x);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_ManifoldIVec3_1y_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ManifoldIVec3 *arg1 = (ManifoldIVec3 *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ManifoldIVec3 **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->y = arg2;
}


SWIGEXPORT jint JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_ManifoldIVec3_1y_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ManifoldIVec3 *arg1 = (ManifoldIVec3 *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ManifoldIVec3 **)&jarg1; 
  result = (int) ((arg1)->y);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_ManifoldIVec3_1z_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ManifoldIVec3 *arg1 = (ManifoldIVec3 *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ManifoldIVec3 **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->z = arg2;
}


SWIGEXPORT jint JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_ManifoldIVec3_1z_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ManifoldIVec3 *arg1 = (ManifoldIVec3 *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ManifoldIVec3 **)&jarg1; 
  result = (int) ((arg1)->z);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_new_1ManifoldIVec3(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ManifoldIVec3 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ManifoldIVec3 *)new ManifoldIVec3();
  *(ManifoldIVec3 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_delete_1ManifoldIVec3(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ManifoldIVec3 *arg1 = (ManifoldIVec3 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ManifoldIVec3 **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_ManifoldVec4_1x_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  ManifoldVec4 *arg1 = (ManifoldVec4 *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ManifoldVec4 **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->x = arg2;
}


SWIGEXPORT jfloat JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_ManifoldVec4_1x_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  ManifoldVec4 *arg1 = (ManifoldVec4 *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ManifoldVec4 **)&jarg1; 
  result = (float) ((arg1)->x);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_ManifoldVec4_1y_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  ManifoldVec4 *arg1 = (ManifoldVec4 *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ManifoldVec4 **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->y = arg2;
}


SWIGEXPORT jfloat JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_ManifoldVec4_1y_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  ManifoldVec4 *arg1 = (ManifoldVec4 *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ManifoldVec4 **)&jarg1; 
  result = (float) ((arg1)->y);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_ManifoldVec4_1z_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  ManifoldVec4 *arg1 = (ManifoldVec4 *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ManifoldVec4 **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->z = arg2;
}


SWIGEXPORT jfloat JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_ManifoldVec4_1z_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  ManifoldVec4 *arg1 = (ManifoldVec4 *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ManifoldVec4 **)&jarg1; 
  result = (float) ((arg1)->z);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_ManifoldVec4_1w_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  ManifoldVec4 *arg1 = (ManifoldVec4 *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ManifoldVec4 **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->w = arg2;
}


SWIGEXPORT jfloat JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_ManifoldVec4_1w_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  ManifoldVec4 *arg1 = (ManifoldVec4 *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ManifoldVec4 **)&jarg1; 
  result = (float) ((arg1)->w);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_new_1ManifoldVec4(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ManifoldVec4 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ManifoldVec4 *)new ManifoldVec4();
  *(ManifoldVec4 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_delete_1ManifoldVec4(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ManifoldVec4 *arg1 = (ManifoldVec4 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ManifoldVec4 **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_ManifoldProperties_1surface_1area_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  ManifoldProperties *arg1 = (ManifoldProperties *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ManifoldProperties **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->surface_area = arg2;
}


SWIGEXPORT jfloat JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_ManifoldProperties_1surface_1area_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  ManifoldProperties *arg1 = (ManifoldProperties *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ManifoldProperties **)&jarg1; 
  result = (float) ((arg1)->surface_area);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_ManifoldProperties_1volume_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  ManifoldProperties *arg1 = (ManifoldProperties *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ManifoldProperties **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->volume = arg2;
}


SWIGEXPORT jfloat JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_ManifoldProperties_1volume_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  ManifoldProperties *arg1 = (ManifoldProperties *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ManifoldProperties **)&jarg1; 
  result = (float) ((arg1)->volume);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_new_1ManifoldProperties(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ManifoldProperties *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ManifoldProperties *)new ManifoldProperties();
  *(ManifoldProperties **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_delete_1ManifoldProperties(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ManifoldProperties *arg1 = (ManifoldProperties *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ManifoldProperties **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1simple_1polygon(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jlong jresult = 0 ;
  void *arg1 = (void *) 0 ;
  ManifoldVec2 *arg2 = (ManifoldVec2 *) 0 ;
  size_t arg3 ;
  ManifoldSimplePolygon *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = *(void **)&jarg1; 
  arg2 = *(ManifoldVec2 **)&jarg2; 
  arg3 = (size_t)jarg3; 
  result = (ManifoldSimplePolygon *)manifold_simple_polygon(arg1,arg2,SWIG_STD_MOVE(arg3));
  *(ManifoldSimplePolygon **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1polygons(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  void *arg1 = (void *) 0 ;
  ManifoldSimplePolygon **arg2 = (ManifoldSimplePolygon **) 0 ;
  size_t arg3 ;
  ManifoldPolygons *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  arg2 = *(ManifoldSimplePolygon ***)&jarg2; 
  arg3 = (size_t)jarg3; 
  result = (ManifoldPolygons *)manifold_polygons(arg1,arg2,SWIG_STD_MOVE(arg3));
  *(ManifoldPolygons **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1simple_1polygon_1length(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  ManifoldSimplePolygon *arg1 = (ManifoldSimplePolygon *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ManifoldSimplePolygon **)&jarg1; 
  result = manifold_simple_polygon_length(arg1);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1polygons_1length(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  ManifoldPolygons *arg1 = (ManifoldPolygons *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ManifoldPolygons **)&jarg1; 
  result = manifold_polygons_length(arg1);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1polygons_1simple_1length(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  ManifoldPolygons *arg1 = (ManifoldPolygons *) 0 ;
  int arg2 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ManifoldPolygons **)&jarg1; 
  arg2 = (int)jarg2; 
  result = manifold_polygons_simple_length(arg1,arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1simple_1polygon_1get_1point(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  ManifoldSimplePolygon *arg1 = (ManifoldSimplePolygon *) 0 ;
  int arg2 ;
  ManifoldVec2 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ManifoldSimplePolygon **)&jarg1; 
  arg2 = (int)jarg2; 
  result = manifold_simple_polygon_get_point(arg1,arg2);
  *(ManifoldVec2 **)&jresult = new ManifoldVec2(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1polygons_1get_1simple(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3) {
  jlong jresult = 0 ;
  void *arg1 = (void *) 0 ;
  ManifoldPolygons *arg2 = (ManifoldPolygons *) 0 ;
  int arg3 ;
  ManifoldSimplePolygon *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  arg2 = *(ManifoldPolygons **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (ManifoldSimplePolygon *)manifold_polygons_get_simple(arg1,arg2,arg3);
  *(ManifoldSimplePolygon **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1polygons_1get_1point(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jint jarg3) {
  jlong jresult = 0 ;
  ManifoldPolygons *arg1 = (ManifoldPolygons *) 0 ;
  int arg2 ;
  int arg3 ;
  ManifoldVec2 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ManifoldPolygons **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = manifold_polygons_get_point(arg1,arg2,arg3);
  *(ManifoldVec2 **)&jresult = new ManifoldVec2(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1meshgl(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6) {
  jlong jresult = 0 ;
  void *arg1 = (void *) 0 ;
  float *arg2 = (float *) 0 ;
  size_t arg3 ;
  size_t arg4 ;
  uint32_t *arg5 = (uint32_t *) 0 ;
  size_t arg6 ;
  ManifoldMeshGL *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  arg2 = *(float **)&jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = (size_t)jarg4; 
  arg5 = *(uint32_t **)&jarg5; 
  arg6 = (size_t)jarg6; 
  result = (ManifoldMeshGL *)manifold_meshgl(arg1,arg2,SWIG_STD_MOVE(arg3),SWIG_STD_MOVE(arg4),arg5,SWIG_STD_MOVE(arg6));
  *(ManifoldMeshGL **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1meshgl_1w_1tangents(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6, jlong jarg7) {
  jlong jresult = 0 ;
  void *arg1 = (void *) 0 ;
  float *arg2 = (float *) 0 ;
  size_t arg3 ;
  size_t arg4 ;
  uint32_t *arg5 = (uint32_t *) 0 ;
  size_t arg6 ;
  float *arg7 = (float *) 0 ;
  ManifoldMeshGL *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  arg2 = *(float **)&jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = (size_t)jarg4; 
  arg5 = *(uint32_t **)&jarg5; 
  arg6 = (size_t)jarg6; 
  arg7 = *(float **)&jarg7; 
  result = (ManifoldMeshGL *)manifold_meshgl_w_tangents(arg1,arg2,SWIG_STD_MOVE(arg3),SWIG_STD_MOVE(arg4),arg5,SWIG_STD_MOVE(arg6),arg7);
  *(ManifoldMeshGL **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1get_1meshgl(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  void *arg1 = (void *) 0 ;
  ManifoldManifold *arg2 = (ManifoldManifold *) 0 ;
  ManifoldMeshGL *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  arg2 = *(ManifoldManifold **)&jarg2; 
  result = (ManifoldMeshGL *)manifold_get_meshgl(arg1,arg2);
  *(ManifoldMeshGL **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1meshgl_1copy(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  void *arg1 = (void *) 0 ;
  ManifoldMeshGL *arg2 = (ManifoldMeshGL *) 0 ;
  ManifoldMeshGL *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  arg2 = *(ManifoldMeshGL **)&jarg2; 
  result = (ManifoldMeshGL *)manifold_meshgl_copy(arg1,arg2);
  *(ManifoldMeshGL **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1meshgl_1merge(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  void *arg1 = (void *) 0 ;
  ManifoldMeshGL *arg2 = (ManifoldMeshGL *) 0 ;
  ManifoldMeshGL *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  arg2 = *(ManifoldMeshGL **)&jarg2; 
  result = (ManifoldMeshGL *)manifold_meshgl_merge(arg1,arg2);
  *(ManifoldMeshGL **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1level_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jfloat jarg4, jfloat jarg5, jfloat jarg6, jlong jarg7) {
  jlong jresult = 0 ;
  void *arg1 = (void *) 0 ;
  float (*arg2)(float,float,float,void *) = (float (*)(float,float,float,void *)) 0 ;
  ManifoldBox *arg3 = (ManifoldBox *) 0 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  void *arg7 = (void *) 0 ;
  ManifoldMeshGL *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  arg2 = *(float (**)(float,float,float,void *))&jarg2; 
  arg3 = *(ManifoldBox **)&jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = *(void **)&jarg7; 
  result = (ManifoldMeshGL *)manifold_level_set(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  *(ManifoldMeshGL **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1level_1set_1seq(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jfloat jarg4, jfloat jarg5, jfloat jarg6, jlong jarg7) {
  jlong jresult = 0 ;
  void *arg1 = (void *) 0 ;
  float (*arg2)(float,float,float,void *) = (float (*)(float,float,float,void *)) 0 ;
  ManifoldBox *arg3 = (ManifoldBox *) 0 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  void *arg7 = (void *) 0 ;
  ManifoldMeshGL *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  arg2 = *(float (**)(float,float,float,void *))&jarg2; 
  arg3 = *(ManifoldBox **)&jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = *(void **)&jarg7; 
  result = (ManifoldMeshGL *)manifold_level_set_seq(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  *(ManifoldMeshGL **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1manifold_1empty_1vec(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  void *arg1 = (void *) 0 ;
  ManifoldManifoldVec *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  result = (ManifoldManifoldVec *)manifold_manifold_empty_vec(arg1);
  *(ManifoldManifoldVec **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1manifold_1vec(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  void *arg1 = (void *) 0 ;
  size_t arg2 ;
  ManifoldManifoldVec *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  arg2 = (size_t)jarg2; 
  result = (ManifoldManifoldVec *)manifold_manifold_vec(arg1,SWIG_STD_MOVE(arg2));
  *(ManifoldManifoldVec **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1manifold_1vec_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  ManifoldManifoldVec *arg1 = (ManifoldManifoldVec *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ManifoldManifoldVec **)&jarg1; 
  arg2 = (size_t)jarg2; 
  manifold_manifold_vec_reserve(arg1,SWIG_STD_MOVE(arg2));
}


SWIGEXPORT jlong JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1manifold_1vec_1length(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  ManifoldManifoldVec *arg1 = (ManifoldManifoldVec *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ManifoldManifoldVec **)&jarg1; 
  result = manifold_manifold_vec_length(arg1);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1manifold_1vec_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3) {
  jlong jresult = 0 ;
  void *arg1 = (void *) 0 ;
  ManifoldManifoldVec *arg2 = (ManifoldManifoldVec *) 0 ;
  int arg3 ;
  ManifoldManifold *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  arg2 = *(ManifoldManifoldVec **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (ManifoldManifold *)manifold_manifold_vec_get(arg1,arg2,arg3);
  *(ManifoldManifold **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1manifold_1vec_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  ManifoldManifoldVec *arg1 = (ManifoldManifoldVec *) 0 ;
  int arg2 ;
  ManifoldManifold *arg3 = (ManifoldManifold *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ManifoldManifoldVec **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(ManifoldManifold **)&jarg3; 
  manifold_manifold_vec_set(arg1,arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1manifold_1vec_1push_1back(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  ManifoldManifoldVec *arg1 = (ManifoldManifoldVec *) 0 ;
  ManifoldManifold *arg2 = (ManifoldManifold *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ManifoldManifoldVec **)&jarg1; 
  arg2 = *(ManifoldManifold **)&jarg2; 
  manifold_manifold_vec_push_back(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1boolean(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jint jarg4) {
  jlong jresult = 0 ;
  void *arg1 = (void *) 0 ;
  ManifoldManifold *arg2 = (ManifoldManifold *) 0 ;
  ManifoldManifold *arg3 = (ManifoldManifold *) 0 ;
  ManifoldOpType arg4 ;
  ManifoldManifold *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  arg2 = *(ManifoldManifold **)&jarg2; 
  arg3 = *(ManifoldManifold **)&jarg3; 
  arg4 = (ManifoldOpType)jarg4; 
  result = (ManifoldManifold *)manifold_boolean(arg1,arg2,arg3,arg4);
  *(ManifoldManifold **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1batch_1boolean(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3) {
  jlong jresult = 0 ;
  void *arg1 = (void *) 0 ;
  ManifoldManifoldVec *arg2 = (ManifoldManifoldVec *) 0 ;
  ManifoldOpType arg3 ;
  ManifoldManifold *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  arg2 = *(ManifoldManifoldVec **)&jarg2; 
  arg3 = (ManifoldOpType)jarg3; 
  result = (ManifoldManifold *)manifold_batch_boolean(arg1,arg2,arg3);
  *(ManifoldManifold **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1union(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  void *arg1 = (void *) 0 ;
  ManifoldManifold *arg2 = (ManifoldManifold *) 0 ;
  ManifoldManifold *arg3 = (ManifoldManifold *) 0 ;
  ManifoldManifold *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  arg2 = *(ManifoldManifold **)&jarg2; 
  arg3 = *(ManifoldManifold **)&jarg3; 
  result = (ManifoldManifold *)manifold_union(arg1,arg2,arg3);
  *(ManifoldManifold **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1difference(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  void *arg1 = (void *) 0 ;
  ManifoldManifold *arg2 = (ManifoldManifold *) 0 ;
  ManifoldManifold *arg3 = (ManifoldManifold *) 0 ;
  ManifoldManifold *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  arg2 = *(ManifoldManifold **)&jarg2; 
  arg3 = *(ManifoldManifold **)&jarg3; 
  result = (ManifoldManifold *)manifold_difference(arg1,arg2,arg3);
  *(ManifoldManifold **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1intersection(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  void *arg1 = (void *) 0 ;
  ManifoldManifold *arg2 = (ManifoldManifold *) 0 ;
  ManifoldManifold *arg3 = (ManifoldManifold *) 0 ;
  ManifoldManifold *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  arg2 = *(ManifoldManifold **)&jarg2; 
  arg3 = *(ManifoldManifold **)&jarg3; 
  result = (ManifoldManifold *)manifold_intersection(arg1,arg2,arg3);
  *(ManifoldManifold **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1split(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  void *arg1 = (void *) 0 ;
  void *arg2 = (void *) 0 ;
  ManifoldManifold *arg3 = (ManifoldManifold *) 0 ;
  ManifoldManifold *arg4 = (ManifoldManifold *) 0 ;
  ManifoldManifoldPair result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  arg3 = *(ManifoldManifold **)&jarg3; 
  arg4 = *(ManifoldManifold **)&jarg4; 
  result = manifold_split(arg1,arg2,arg3,arg4);
  *(ManifoldManifoldPair **)&jresult = new ManifoldManifoldPair(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1split_1by_1plane(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jfloat jarg4, jfloat jarg5, jfloat jarg6, jfloat jarg7) {
  jlong jresult = 0 ;
  void *arg1 = (void *) 0 ;
  void *arg2 = (void *) 0 ;
  ManifoldManifold *arg3 = (ManifoldManifold *) 0 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  ManifoldManifoldPair result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  arg3 = *(ManifoldManifold **)&jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  result = manifold_split_by_plane(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  *(ManifoldManifoldPair **)&jresult = new ManifoldManifoldPair(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1trim_1by_1plane(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5, jfloat jarg6) {
  jlong jresult = 0 ;
  void *arg1 = (void *) 0 ;
  ManifoldManifold *arg2 = (ManifoldManifold *) 0 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  ManifoldManifold *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  arg2 = *(ManifoldManifold **)&jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  result = (ManifoldManifold *)manifold_trim_by_plane(arg1,arg2,arg3,arg4,arg5,arg6);
  *(ManifoldManifold **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1slice(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jfloat jarg3) {
  jlong jresult = 0 ;
  void *arg1 = (void *) 0 ;
  ManifoldManifold *arg2 = (ManifoldManifold *) 0 ;
  float arg3 ;
  ManifoldPolygons *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  arg2 = *(ManifoldManifold **)&jarg2; 
  arg3 = (float)jarg3; 
  result = (ManifoldPolygons *)manifold_slice(arg1,arg2,arg3);
  *(ManifoldPolygons **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1project(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  void *arg1 = (void *) 0 ;
  ManifoldManifold *arg2 = (ManifoldManifold *) 0 ;
  ManifoldPolygons *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  arg2 = *(ManifoldManifold **)&jarg2; 
  result = (ManifoldPolygons *)manifold_project(arg1,arg2);
  *(ManifoldPolygons **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1hull(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  void *arg1 = (void *) 0 ;
  ManifoldManifold *arg2 = (ManifoldManifold *) 0 ;
  ManifoldManifold *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  arg2 = *(ManifoldManifold **)&jarg2; 
  result = (ManifoldManifold *)manifold_hull(arg1,arg2);
  *(ManifoldManifold **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1batch_1hull(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  void *arg1 = (void *) 0 ;
  ManifoldManifoldVec *arg2 = (ManifoldManifoldVec *) 0 ;
  ManifoldManifold *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  arg2 = *(ManifoldManifoldVec **)&jarg2; 
  result = (ManifoldManifold *)manifold_batch_hull(arg1,arg2);
  *(ManifoldManifold **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1hull_1pts(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jlong jresult = 0 ;
  void *arg1 = (void *) 0 ;
  ManifoldVec3 *arg2 = (ManifoldVec3 *) 0 ;
  size_t arg3 ;
  ManifoldManifold *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = *(void **)&jarg1; 
  arg2 = *(ManifoldVec3 **)&jarg2; 
  arg3 = (size_t)jarg3; 
  result = (ManifoldManifold *)manifold_hull_pts(arg1,arg2,SWIG_STD_MOVE(arg3));
  *(ManifoldManifold **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1translate(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5) {
  jlong jresult = 0 ;
  void *arg1 = (void *) 0 ;
  ManifoldManifold *arg2 = (ManifoldManifold *) 0 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  ManifoldManifold *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  arg2 = *(ManifoldManifold **)&jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  result = (ManifoldManifold *)manifold_translate(arg1,arg2,arg3,arg4,arg5);
  *(ManifoldManifold **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1rotate(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5) {
  jlong jresult = 0 ;
  void *arg1 = (void *) 0 ;
  ManifoldManifold *arg2 = (ManifoldManifold *) 0 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  ManifoldManifold *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  arg2 = *(ManifoldManifold **)&jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  result = (ManifoldManifold *)manifold_rotate(arg1,arg2,arg3,arg4,arg5);
  *(ManifoldManifold **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1scale(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5) {
  jlong jresult = 0 ;
  void *arg1 = (void *) 0 ;
  ManifoldManifold *arg2 = (ManifoldManifold *) 0 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  ManifoldManifold *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  arg2 = *(ManifoldManifold **)&jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  result = (ManifoldManifold *)manifold_scale(arg1,arg2,arg3,arg4,arg5);
  *(ManifoldManifold **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1transform(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5, jfloat jarg6, jfloat jarg7, jfloat jarg8, jfloat jarg9, jfloat jarg10, jfloat jarg11, jfloat jarg12, jfloat jarg13, jfloat jarg14) {
  jlong jresult = 0 ;
  void *arg1 = (void *) 0 ;
  ManifoldManifold *arg2 = (ManifoldManifold *) 0 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  float arg8 ;
  float arg9 ;
  float arg10 ;
  float arg11 ;
  float arg12 ;
  float arg13 ;
  float arg14 ;
  ManifoldManifold *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  arg2 = *(ManifoldManifold **)&jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  arg8 = (float)jarg8; 
  arg9 = (float)jarg9; 
  arg10 = (float)jarg10; 
  arg11 = (float)jarg11; 
  arg12 = (float)jarg12; 
  arg13 = (float)jarg13; 
  arg14 = (float)jarg14; 
  result = (ManifoldManifold *)manifold_transform(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14);
  *(ManifoldManifold **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1mirror(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5) {
  jlong jresult = 0 ;
  void *arg1 = (void *) 0 ;
  ManifoldManifold *arg2 = (ManifoldManifold *) 0 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  ManifoldManifold *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  arg2 = *(ManifoldManifold **)&jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  result = (ManifoldManifold *)manifold_mirror(arg1,arg2,arg3,arg4,arg5);
  *(ManifoldManifold **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1warp(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  void *arg1 = (void *) 0 ;
  ManifoldManifold *arg2 = (ManifoldManifold *) 0 ;
  ManifoldVec3 (*arg3)(float,float,float,void *) = (ManifoldVec3 (*)(float,float,float,void *)) 0 ;
  void *arg4 = (void *) 0 ;
  ManifoldManifold *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  arg2 = *(ManifoldManifold **)&jarg2; 
  arg3 = *(ManifoldVec3 (**)(float,float,float,void *))&jarg3; 
  arg4 = *(void **)&jarg4; 
  result = (ManifoldManifold *)manifold_warp(arg1,arg2,arg3,arg4);
  *(ManifoldManifold **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1smooth_1by_1normals(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3) {
  jlong jresult = 0 ;
  void *arg1 = (void *) 0 ;
  ManifoldManifold *arg2 = (ManifoldManifold *) 0 ;
  int arg3 ;
  ManifoldManifold *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  arg2 = *(ManifoldManifold **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (ManifoldManifold *)manifold_smooth_by_normals(arg1,arg2,arg3);
  *(ManifoldManifold **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1smooth_1out(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jfloat jarg3, jfloat jarg4) {
  jlong jresult = 0 ;
  void *arg1 = (void *) 0 ;
  ManifoldManifold *arg2 = (ManifoldManifold *) 0 ;
  float arg3 ;
  float arg4 ;
  ManifoldManifold *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  arg2 = *(ManifoldManifold **)&jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  result = (ManifoldManifold *)manifold_smooth_out(arg1,arg2,arg3,arg4);
  *(ManifoldManifold **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1refine(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3) {
  jlong jresult = 0 ;
  void *arg1 = (void *) 0 ;
  ManifoldManifold *arg2 = (ManifoldManifold *) 0 ;
  int arg3 ;
  ManifoldManifold *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  arg2 = *(ManifoldManifold **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (ManifoldManifold *)manifold_refine(arg1,arg2,arg3);
  *(ManifoldManifold **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1refine_1to_1length(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jfloat jarg3) {
  jlong jresult = 0 ;
  void *arg1 = (void *) 0 ;
  ManifoldManifold *arg2 = (ManifoldManifold *) 0 ;
  float arg3 ;
  ManifoldManifold *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  arg2 = *(ManifoldManifold **)&jarg2; 
  arg3 = (float)jarg3; 
  result = (ManifoldManifold *)manifold_refine_to_length(arg1,arg2,arg3);
  *(ManifoldManifold **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  void *arg1 = (void *) 0 ;
  ManifoldManifold *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  result = (ManifoldManifold *)manifold_empty(arg1);
  *(ManifoldManifold **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1copy(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  void *arg1 = (void *) 0 ;
  ManifoldManifold *arg2 = (ManifoldManifold *) 0 ;
  ManifoldManifold *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  arg2 = *(ManifoldManifold **)&jarg2; 
  result = (ManifoldManifold *)manifold_copy(arg1,arg2);
  *(ManifoldManifold **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1tetrahedron(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  void *arg1 = (void *) 0 ;
  ManifoldManifold *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  result = (ManifoldManifold *)manifold_tetrahedron(arg1);
  *(ManifoldManifold **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1cube(JNIEnv *jenv, jclass jcls, jlong jarg1, jfloat jarg2, jfloat jarg3, jfloat jarg4, jint jarg5) {
  jlong jresult = 0 ;
  void *arg1 = (void *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  int arg5 ;
  ManifoldManifold *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (int)jarg5; 
  result = (ManifoldManifold *)manifold_cube(arg1,arg2,arg3,arg4,arg5);
  *(ManifoldManifold **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1cylinder(JNIEnv *jenv, jclass jcls, jlong jarg1, jfloat jarg2, jfloat jarg3, jfloat jarg4, jint jarg5, jint jarg6) {
  jlong jresult = 0 ;
  void *arg1 = (void *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  int arg5 ;
  int arg6 ;
  ManifoldManifold *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  result = (ManifoldManifold *)manifold_cylinder(arg1,arg2,arg3,arg4,arg5,arg6);
  *(ManifoldManifold **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1sphere(JNIEnv *jenv, jclass jcls, jlong jarg1, jfloat jarg2, jint jarg3) {
  jlong jresult = 0 ;
  void *arg1 = (void *) 0 ;
  float arg2 ;
  int arg3 ;
  ManifoldManifold *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (int)jarg3; 
  result = (ManifoldManifold *)manifold_sphere(arg1,arg2,arg3);
  *(ManifoldManifold **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1of_1meshgl(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  void *arg1 = (void *) 0 ;
  ManifoldMeshGL *arg2 = (ManifoldMeshGL *) 0 ;
  ManifoldManifold *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  arg2 = *(ManifoldMeshGL **)&jarg2; 
  result = (ManifoldManifold *)manifold_of_meshgl(arg1,arg2);
  *(ManifoldManifold **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1smooth(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
  jlong jresult = 0 ;
  void *arg1 = (void *) 0 ;
  ManifoldMeshGL *arg2 = (ManifoldMeshGL *) 0 ;
  size_t *arg3 = (size_t *) 0 ;
  float *arg4 = (float *) 0 ;
  size_t arg5 ;
  ManifoldManifold *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  arg2 = *(ManifoldMeshGL **)&jarg2; 
  arg3 = *(size_t **)&jarg3; 
  arg4 = *(float **)&jarg4; 
  arg5 = (size_t)jarg5; 
  result = (ManifoldManifold *)manifold_smooth(arg1,arg2,arg3,arg4,SWIG_STD_MOVE(arg5));
  *(ManifoldManifold **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1extrude(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jfloat jarg3, jint jarg4, jfloat jarg5, jfloat jarg6, jfloat jarg7) {
  jlong jresult = 0 ;
  void *arg1 = (void *) 0 ;
  ManifoldPolygons *arg2 = (ManifoldPolygons *) 0 ;
  float arg3 ;
  int arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  ManifoldManifold *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  arg2 = *(ManifoldPolygons **)&jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  result = (ManifoldManifold *)manifold_extrude(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  *(ManifoldManifold **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1revolve(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3) {
  jlong jresult = 0 ;
  void *arg1 = (void *) 0 ;
  ManifoldPolygons *arg2 = (ManifoldPolygons *) 0 ;
  int arg3 ;
  ManifoldManifold *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  arg2 = *(ManifoldPolygons **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (ManifoldManifold *)manifold_revolve(arg1,arg2,arg3);
  *(ManifoldManifold **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1compose(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  void *arg1 = (void *) 0 ;
  ManifoldManifoldVec *arg2 = (ManifoldManifoldVec *) 0 ;
  ManifoldManifold *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  arg2 = *(ManifoldManifoldVec **)&jarg2; 
  result = (ManifoldManifold *)manifold_compose(arg1,arg2);
  *(ManifoldManifold **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1decompose(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  void *arg1 = (void *) 0 ;
  ManifoldManifold *arg2 = (ManifoldManifold *) 0 ;
  ManifoldManifoldVec *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  arg2 = *(ManifoldManifold **)&jarg2; 
  result = (ManifoldManifoldVec *)manifold_decompose(arg1,arg2);
  *(ManifoldManifoldVec **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1as_1original(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  void *arg1 = (void *) 0 ;
  ManifoldManifold *arg2 = (ManifoldManifold *) 0 ;
  ManifoldManifold *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  arg2 = *(ManifoldManifold **)&jarg2; 
  result = (ManifoldManifold *)manifold_as_original(arg1,arg2);
  *(ManifoldManifold **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1is_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  ManifoldManifold *arg1 = (ManifoldManifold *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ManifoldManifold **)&jarg1; 
  result = (int)manifold_is_empty(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1status(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  ManifoldManifold *arg1 = (ManifoldManifold *) 0 ;
  ManifoldError result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ManifoldManifold **)&jarg1; 
  result = (ManifoldError)manifold_status(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1num_1vert(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  ManifoldManifold *arg1 = (ManifoldManifold *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ManifoldManifold **)&jarg1; 
  result = (int)manifold_num_vert(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1num_1edge(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  ManifoldManifold *arg1 = (ManifoldManifold *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ManifoldManifold **)&jarg1; 
  result = (int)manifold_num_edge(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1num_1tri(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  ManifoldManifold *arg1 = (ManifoldManifold *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ManifoldManifold **)&jarg1; 
  result = (int)manifold_num_tri(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1bounding_1box(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  void *arg1 = (void *) 0 ;
  ManifoldManifold *arg2 = (ManifoldManifold *) 0 ;
  ManifoldBox *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  arg2 = *(ManifoldManifold **)&jarg2; 
  result = (ManifoldBox *)manifold_bounding_box(arg1,arg2);
  *(ManifoldBox **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1precision(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jfloat jresult = 0 ;
  ManifoldManifold *arg1 = (ManifoldManifold *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ManifoldManifold **)&jarg1; 
  result = (float)manifold_precision(arg1);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1genus(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  ManifoldManifold *arg1 = (ManifoldManifold *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ManifoldManifold **)&jarg1; 
  result = (int)manifold_genus(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1get_1properties(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  ManifoldManifold *arg1 = (ManifoldManifold *) 0 ;
  ManifoldProperties result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ManifoldManifold **)&jarg1; 
  result = manifold_get_properties(arg1);
  *(ManifoldProperties **)&jresult = new ManifoldProperties(result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1get_1circular_1segments(JNIEnv *jenv, jclass jcls, jfloat jarg1) {
  jint jresult = 0 ;
  float arg1 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (float)jarg1; 
  result = (int)manifold_get_circular_segments(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1original_1id(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  ManifoldManifold *arg1 = (ManifoldManifold *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ManifoldManifold **)&jarg1; 
  result = (int)manifold_original_id(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1reserve_1ids(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  uint32_t arg1 ;
  uint32_t *argp1 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(uint32_t **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null uint32_t");
    return 0;
  }
  arg1 = *argp1; 
  result = manifold_reserve_ids(SWIG_STD_MOVE(arg1));
  *(uint32_t **)&jresult = new uint32_t(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1set_1properties(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3, jlong jarg4, jlong jarg5) {
  jlong jresult = 0 ;
  void *arg1 = (void *) 0 ;
  ManifoldManifold *arg2 = (ManifoldManifold *) 0 ;
  int arg3 ;
  void (*arg4)(float *,ManifoldVec3,float const *,void *) = (void (*)(float *,ManifoldVec3,float const *,void *)) 0 ;
  void *arg5 = (void *) 0 ;
  ManifoldManifold *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  arg2 = *(ManifoldManifold **)&jarg2; 
  arg3 = (int)jarg3; 
  arg4 = *(void (**)(float *,ManifoldVec3,float const *,void *))&jarg4; 
  arg5 = *(void **)&jarg5; 
  result = (ManifoldManifold *)manifold_set_properties(arg1,arg2,arg3,arg4,arg5);
  *(ManifoldManifold **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1calculate_1curvature(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3, jint jarg4) {
  jlong jresult = 0 ;
  void *arg1 = (void *) 0 ;
  ManifoldManifold *arg2 = (ManifoldManifold *) 0 ;
  int arg3 ;
  int arg4 ;
  ManifoldManifold *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  arg2 = *(ManifoldManifold **)&jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  result = (ManifoldManifold *)manifold_calculate_curvature(arg1,arg2,arg3,arg4);
  *(ManifoldManifold **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1min_1gap(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jfloat jarg3) {
  jfloat jresult = 0 ;
  ManifoldManifold *arg1 = (ManifoldManifold *) 0 ;
  ManifoldManifold *arg2 = (ManifoldManifold *) 0 ;
  float arg3 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ManifoldManifold **)&jarg1; 
  arg2 = *(ManifoldManifold **)&jarg2; 
  arg3 = (float)jarg3; 
  result = (float)manifold_min_gap(arg1,arg2,arg3);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1calculate_1normals(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3, jint jarg4) {
  jlong jresult = 0 ;
  void *arg1 = (void *) 0 ;
  ManifoldManifold *arg2 = (ManifoldManifold *) 0 ;
  int arg3 ;
  int arg4 ;
  ManifoldManifold *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  arg2 = *(ManifoldManifold **)&jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  result = (ManifoldManifold *)manifold_calculate_normals(arg1,arg2,arg3,arg4);
  *(ManifoldManifold **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1cross_1section_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  void *arg1 = (void *) 0 ;
  ManifoldCrossSection *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  result = (ManifoldCrossSection *)manifold_cross_section_empty(arg1);
  *(ManifoldCrossSection **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1cross_1section_1copy(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  void *arg1 = (void *) 0 ;
  ManifoldCrossSection *arg2 = (ManifoldCrossSection *) 0 ;
  ManifoldCrossSection *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  arg2 = *(ManifoldCrossSection **)&jarg2; 
  result = (ManifoldCrossSection *)manifold_cross_section_copy(arg1,arg2);
  *(ManifoldCrossSection **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1cross_1section_1of_1simple_1polygon(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3) {
  jlong jresult = 0 ;
  void *arg1 = (void *) 0 ;
  ManifoldSimplePolygon *arg2 = (ManifoldSimplePolygon *) 0 ;
  ManifoldFillRule arg3 ;
  ManifoldCrossSection *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  arg2 = *(ManifoldSimplePolygon **)&jarg2; 
  arg3 = (ManifoldFillRule)jarg3; 
  result = (ManifoldCrossSection *)manifold_cross_section_of_simple_polygon(arg1,arg2,arg3);
  *(ManifoldCrossSection **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1cross_1section_1of_1polygons(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3) {
  jlong jresult = 0 ;
  void *arg1 = (void *) 0 ;
  ManifoldPolygons *arg2 = (ManifoldPolygons *) 0 ;
  ManifoldFillRule arg3 ;
  ManifoldCrossSection *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  arg2 = *(ManifoldPolygons **)&jarg2; 
  arg3 = (ManifoldFillRule)jarg3; 
  result = (ManifoldCrossSection *)manifold_cross_section_of_polygons(arg1,arg2,arg3);
  *(ManifoldCrossSection **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1cross_1section_1square(JNIEnv *jenv, jclass jcls, jlong jarg1, jfloat jarg2, jfloat jarg3, jint jarg4) {
  jlong jresult = 0 ;
  void *arg1 = (void *) 0 ;
  float arg2 ;
  float arg3 ;
  int arg4 ;
  ManifoldCrossSection *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (int)jarg4; 
  result = (ManifoldCrossSection *)manifold_cross_section_square(arg1,arg2,arg3,arg4);
  *(ManifoldCrossSection **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1cross_1section_1circle(JNIEnv *jenv, jclass jcls, jlong jarg1, jfloat jarg2, jint jarg3) {
  jlong jresult = 0 ;
  void *arg1 = (void *) 0 ;
  float arg2 ;
  int arg3 ;
  ManifoldCrossSection *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (int)jarg3; 
  result = (ManifoldCrossSection *)manifold_cross_section_circle(arg1,arg2,arg3);
  *(ManifoldCrossSection **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1cross_1section_1compose(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  void *arg1 = (void *) 0 ;
  ManifoldCrossSectionVec *arg2 = (ManifoldCrossSectionVec *) 0 ;
  ManifoldCrossSection *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  arg2 = *(ManifoldCrossSectionVec **)&jarg2; 
  result = (ManifoldCrossSection *)manifold_cross_section_compose(arg1,arg2);
  *(ManifoldCrossSection **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1cross_1section_1decompose(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  void *arg1 = (void *) 0 ;
  ManifoldCrossSection *arg2 = (ManifoldCrossSection *) 0 ;
  ManifoldCrossSectionVec *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  arg2 = *(ManifoldCrossSection **)&jarg2; 
  result = (ManifoldCrossSectionVec *)manifold_cross_section_decompose(arg1,arg2);
  *(ManifoldCrossSectionVec **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1cross_1section_1empty_1vec(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  void *arg1 = (void *) 0 ;
  ManifoldCrossSectionVec *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  result = (ManifoldCrossSectionVec *)manifold_cross_section_empty_vec(arg1);
  *(ManifoldCrossSectionVec **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1cross_1section_1vec(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  void *arg1 = (void *) 0 ;
  size_t arg2 ;
  ManifoldCrossSectionVec *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  arg2 = (size_t)jarg2; 
  result = (ManifoldCrossSectionVec *)manifold_cross_section_vec(arg1,SWIG_STD_MOVE(arg2));
  *(ManifoldCrossSectionVec **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1cross_1section_1vec_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  ManifoldCrossSectionVec *arg1 = (ManifoldCrossSectionVec *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ManifoldCrossSectionVec **)&jarg1; 
  arg2 = (size_t)jarg2; 
  manifold_cross_section_vec_reserve(arg1,SWIG_STD_MOVE(arg2));
}


SWIGEXPORT jlong JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1cross_1section_1vec_1length(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  ManifoldCrossSectionVec *arg1 = (ManifoldCrossSectionVec *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ManifoldCrossSectionVec **)&jarg1; 
  result = manifold_cross_section_vec_length(arg1);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1cross_1section_1vec_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3) {
  jlong jresult = 0 ;
  void *arg1 = (void *) 0 ;
  ManifoldCrossSectionVec *arg2 = (ManifoldCrossSectionVec *) 0 ;
  int arg3 ;
  ManifoldCrossSection *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  arg2 = *(ManifoldCrossSectionVec **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (ManifoldCrossSection *)manifold_cross_section_vec_get(arg1,arg2,arg3);
  *(ManifoldCrossSection **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1cross_1section_1vec_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  ManifoldCrossSectionVec *arg1 = (ManifoldCrossSectionVec *) 0 ;
  int arg2 ;
  ManifoldCrossSection *arg3 = (ManifoldCrossSection *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ManifoldCrossSectionVec **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(ManifoldCrossSection **)&jarg3; 
  manifold_cross_section_vec_set(arg1,arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1cross_1section_1vec_1push_1back(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  ManifoldCrossSectionVec *arg1 = (ManifoldCrossSectionVec *) 0 ;
  ManifoldCrossSection *arg2 = (ManifoldCrossSection *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ManifoldCrossSectionVec **)&jarg1; 
  arg2 = *(ManifoldCrossSection **)&jarg2; 
  manifold_cross_section_vec_push_back(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1cross_1section_1boolean(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jint jarg4) {
  jlong jresult = 0 ;
  void *arg1 = (void *) 0 ;
  ManifoldCrossSection *arg2 = (ManifoldCrossSection *) 0 ;
  ManifoldCrossSection *arg3 = (ManifoldCrossSection *) 0 ;
  ManifoldOpType arg4 ;
  ManifoldCrossSection *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  arg2 = *(ManifoldCrossSection **)&jarg2; 
  arg3 = *(ManifoldCrossSection **)&jarg3; 
  arg4 = (ManifoldOpType)jarg4; 
  result = (ManifoldCrossSection *)manifold_cross_section_boolean(arg1,arg2,arg3,arg4);
  *(ManifoldCrossSection **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1cross_1section_1batch_1boolean(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3) {
  jlong jresult = 0 ;
  void *arg1 = (void *) 0 ;
  ManifoldCrossSectionVec *arg2 = (ManifoldCrossSectionVec *) 0 ;
  ManifoldOpType arg3 ;
  ManifoldCrossSection *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  arg2 = *(ManifoldCrossSectionVec **)&jarg2; 
  arg3 = (ManifoldOpType)jarg3; 
  result = (ManifoldCrossSection *)manifold_cross_section_batch_boolean(arg1,arg2,arg3);
  *(ManifoldCrossSection **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1cross_1section_1union(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  void *arg1 = (void *) 0 ;
  ManifoldCrossSection *arg2 = (ManifoldCrossSection *) 0 ;
  ManifoldCrossSection *arg3 = (ManifoldCrossSection *) 0 ;
  ManifoldCrossSection *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  arg2 = *(ManifoldCrossSection **)&jarg2; 
  arg3 = *(ManifoldCrossSection **)&jarg3; 
  result = (ManifoldCrossSection *)manifold_cross_section_union(arg1,arg2,arg3);
  *(ManifoldCrossSection **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1cross_1section_1difference(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  void *arg1 = (void *) 0 ;
  ManifoldCrossSection *arg2 = (ManifoldCrossSection *) 0 ;
  ManifoldCrossSection *arg3 = (ManifoldCrossSection *) 0 ;
  ManifoldCrossSection *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  arg2 = *(ManifoldCrossSection **)&jarg2; 
  arg3 = *(ManifoldCrossSection **)&jarg3; 
  result = (ManifoldCrossSection *)manifold_cross_section_difference(arg1,arg2,arg3);
  *(ManifoldCrossSection **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1cross_1section_1intersection(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  void *arg1 = (void *) 0 ;
  ManifoldCrossSection *arg2 = (ManifoldCrossSection *) 0 ;
  ManifoldCrossSection *arg3 = (ManifoldCrossSection *) 0 ;
  ManifoldCrossSection *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  arg2 = *(ManifoldCrossSection **)&jarg2; 
  arg3 = *(ManifoldCrossSection **)&jarg3; 
  result = (ManifoldCrossSection *)manifold_cross_section_intersection(arg1,arg2,arg3);
  *(ManifoldCrossSection **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1cross_1section_1hull(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  void *arg1 = (void *) 0 ;
  ManifoldCrossSection *arg2 = (ManifoldCrossSection *) 0 ;
  ManifoldCrossSection *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  arg2 = *(ManifoldCrossSection **)&jarg2; 
  result = (ManifoldCrossSection *)manifold_cross_section_hull(arg1,arg2);
  *(ManifoldCrossSection **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1cross_1section_1batch_1hull(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  void *arg1 = (void *) 0 ;
  ManifoldCrossSectionVec *arg2 = (ManifoldCrossSectionVec *) 0 ;
  ManifoldCrossSection *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  arg2 = *(ManifoldCrossSectionVec **)&jarg2; 
  result = (ManifoldCrossSection *)manifold_cross_section_batch_hull(arg1,arg2);
  *(ManifoldCrossSection **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1cross_1section_1hull_1simple_1polygon(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  void *arg1 = (void *) 0 ;
  ManifoldSimplePolygon *arg2 = (ManifoldSimplePolygon *) 0 ;
  ManifoldCrossSection *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  arg2 = *(ManifoldSimplePolygon **)&jarg2; 
  result = (ManifoldCrossSection *)manifold_cross_section_hull_simple_polygon(arg1,arg2);
  *(ManifoldCrossSection **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1cross_1section_1hull_1polygons(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  void *arg1 = (void *) 0 ;
  ManifoldPolygons *arg2 = (ManifoldPolygons *) 0 ;
  ManifoldCrossSection *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  arg2 = *(ManifoldPolygons **)&jarg2; 
  result = (ManifoldCrossSection *)manifold_cross_section_hull_polygons(arg1,arg2);
  *(ManifoldCrossSection **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1cross_1section_1translate(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jfloat jarg3, jfloat jarg4) {
  jlong jresult = 0 ;
  void *arg1 = (void *) 0 ;
  ManifoldCrossSection *arg2 = (ManifoldCrossSection *) 0 ;
  float arg3 ;
  float arg4 ;
  ManifoldCrossSection *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  arg2 = *(ManifoldCrossSection **)&jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  result = (ManifoldCrossSection *)manifold_cross_section_translate(arg1,arg2,arg3,arg4);
  *(ManifoldCrossSection **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1cross_1section_1rotate(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jfloat jarg3) {
  jlong jresult = 0 ;
  void *arg1 = (void *) 0 ;
  ManifoldCrossSection *arg2 = (ManifoldCrossSection *) 0 ;
  float arg3 ;
  ManifoldCrossSection *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  arg2 = *(ManifoldCrossSection **)&jarg2; 
  arg3 = (float)jarg3; 
  result = (ManifoldCrossSection *)manifold_cross_section_rotate(arg1,arg2,arg3);
  *(ManifoldCrossSection **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1cross_1section_1scale(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jfloat jarg3, jfloat jarg4) {
  jlong jresult = 0 ;
  void *arg1 = (void *) 0 ;
  ManifoldCrossSection *arg2 = (ManifoldCrossSection *) 0 ;
  float arg3 ;
  float arg4 ;
  ManifoldCrossSection *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  arg2 = *(ManifoldCrossSection **)&jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  result = (ManifoldCrossSection *)manifold_cross_section_scale(arg1,arg2,arg3,arg4);
  *(ManifoldCrossSection **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1cross_1section_1mirror(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jfloat jarg3, jfloat jarg4) {
  jlong jresult = 0 ;
  void *arg1 = (void *) 0 ;
  ManifoldCrossSection *arg2 = (ManifoldCrossSection *) 0 ;
  float arg3 ;
  float arg4 ;
  ManifoldCrossSection *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  arg2 = *(ManifoldCrossSection **)&jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  result = (ManifoldCrossSection *)manifold_cross_section_mirror(arg1,arg2,arg3,arg4);
  *(ManifoldCrossSection **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1cross_1section_1transform(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5, jfloat jarg6, jfloat jarg7, jfloat jarg8) {
  jlong jresult = 0 ;
  void *arg1 = (void *) 0 ;
  ManifoldCrossSection *arg2 = (ManifoldCrossSection *) 0 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  float arg8 ;
  ManifoldCrossSection *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  arg2 = *(ManifoldCrossSection **)&jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  arg8 = (float)jarg8; 
  result = (ManifoldCrossSection *)manifold_cross_section_transform(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  *(ManifoldCrossSection **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1cross_1section_1warp(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  void *arg1 = (void *) 0 ;
  ManifoldCrossSection *arg2 = (ManifoldCrossSection *) 0 ;
  ManifoldVec2 (*arg3)(float,float) = (ManifoldVec2 (*)(float,float)) 0 ;
  ManifoldCrossSection *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  arg2 = *(ManifoldCrossSection **)&jarg2; 
  arg3 = *(ManifoldVec2 (**)(float,float))&jarg3; 
  result = (ManifoldCrossSection *)manifold_cross_section_warp(arg1,arg2,arg3);
  *(ManifoldCrossSection **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1cross_1section_1warp_1context(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  void *arg1 = (void *) 0 ;
  ManifoldCrossSection *arg2 = (ManifoldCrossSection *) 0 ;
  ManifoldVec2 (*arg3)(float,float,void *) = (ManifoldVec2 (*)(float,float,void *)) 0 ;
  void *arg4 = (void *) 0 ;
  ManifoldCrossSection *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  arg2 = *(ManifoldCrossSection **)&jarg2; 
  arg3 = *(ManifoldVec2 (**)(float,float,void *))&jarg3; 
  arg4 = *(void **)&jarg4; 
  result = (ManifoldCrossSection *)manifold_cross_section_warp_context(arg1,arg2,arg3,arg4);
  *(ManifoldCrossSection **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1cross_1section_1simplify(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jdouble jarg3) {
  jlong jresult = 0 ;
  void *arg1 = (void *) 0 ;
  ManifoldCrossSection *arg2 = (ManifoldCrossSection *) 0 ;
  double arg3 ;
  ManifoldCrossSection *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  arg2 = *(ManifoldCrossSection **)&jarg2; 
  arg3 = (double)jarg3; 
  result = (ManifoldCrossSection *)manifold_cross_section_simplify(arg1,arg2,arg3);
  *(ManifoldCrossSection **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1cross_1section_1offset(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jdouble jarg3, jint jarg4, jdouble jarg5, jint jarg6) {
  jlong jresult = 0 ;
  void *arg1 = (void *) 0 ;
  ManifoldCrossSection *arg2 = (ManifoldCrossSection *) 0 ;
  double arg3 ;
  ManifoldJoinType arg4 ;
  double arg5 ;
  int arg6 ;
  ManifoldCrossSection *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  arg2 = *(ManifoldCrossSection **)&jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (ManifoldJoinType)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (int)jarg6; 
  result = (ManifoldCrossSection *)manifold_cross_section_offset(arg1,arg2,arg3,arg4,arg5,arg6);
  *(ManifoldCrossSection **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1cross_1section_1area(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  ManifoldCrossSection *arg1 = (ManifoldCrossSection *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ManifoldCrossSection **)&jarg1; 
  result = (double)manifold_cross_section_area(arg1);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1cross_1section_1num_1vert(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  ManifoldCrossSection *arg1 = (ManifoldCrossSection *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ManifoldCrossSection **)&jarg1; 
  result = (int)manifold_cross_section_num_vert(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1cross_1section_1num_1contour(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  ManifoldCrossSection *arg1 = (ManifoldCrossSection *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ManifoldCrossSection **)&jarg1; 
  result = (int)manifold_cross_section_num_contour(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1cross_1section_1is_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  ManifoldCrossSection *arg1 = (ManifoldCrossSection *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ManifoldCrossSection **)&jarg1; 
  result = (int)manifold_cross_section_is_empty(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1cross_1section_1bounds(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  void *arg1 = (void *) 0 ;
  ManifoldCrossSection *arg2 = (ManifoldCrossSection *) 0 ;
  ManifoldRect *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  arg2 = *(ManifoldCrossSection **)&jarg2; 
  result = (ManifoldRect *)manifold_cross_section_bounds(arg1,arg2);
  *(ManifoldRect **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1cross_1section_1to_1polygons(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  void *arg1 = (void *) 0 ;
  ManifoldCrossSection *arg2 = (ManifoldCrossSection *) 0 ;
  ManifoldPolygons *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  arg2 = *(ManifoldCrossSection **)&jarg2; 
  result = (ManifoldPolygons *)manifold_cross_section_to_polygons(arg1,arg2);
  *(ManifoldPolygons **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1rect(JNIEnv *jenv, jclass jcls, jlong jarg1, jfloat jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5) {
  jlong jresult = 0 ;
  void *arg1 = (void *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  ManifoldRect *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  result = (ManifoldRect *)manifold_rect(arg1,arg2,arg3,arg4,arg5);
  *(ManifoldRect **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1rect_1min(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  ManifoldRect *arg1 = (ManifoldRect *) 0 ;
  ManifoldVec2 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ManifoldRect **)&jarg1; 
  result = manifold_rect_min(arg1);
  *(ManifoldVec2 **)&jresult = new ManifoldVec2(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1rect_1max(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  ManifoldRect *arg1 = (ManifoldRect *) 0 ;
  ManifoldVec2 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ManifoldRect **)&jarg1; 
  result = manifold_rect_max(arg1);
  *(ManifoldVec2 **)&jresult = new ManifoldVec2(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1rect_1dimensions(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  ManifoldRect *arg1 = (ManifoldRect *) 0 ;
  ManifoldVec2 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ManifoldRect **)&jarg1; 
  result = manifold_rect_dimensions(arg1);
  *(ManifoldVec2 **)&jresult = new ManifoldVec2(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1rect_1center(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  ManifoldRect *arg1 = (ManifoldRect *) 0 ;
  ManifoldVec2 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ManifoldRect **)&jarg1; 
  result = manifold_rect_center(arg1);
  *(ManifoldVec2 **)&jresult = new ManifoldVec2(result); 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1rect_1scale(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jfloat jresult = 0 ;
  ManifoldRect *arg1 = (ManifoldRect *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ManifoldRect **)&jarg1; 
  result = (float)manifold_rect_scale(arg1);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1rect_1contains_1pt(JNIEnv *jenv, jclass jcls, jlong jarg1, jfloat jarg2, jfloat jarg3) {
  jint jresult = 0 ;
  ManifoldRect *arg1 = (ManifoldRect *) 0 ;
  float arg2 ;
  float arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ManifoldRect **)&jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (int)manifold_rect_contains_pt(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1rect_1contains_1rect(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  ManifoldRect *arg1 = (ManifoldRect *) 0 ;
  ManifoldRect *arg2 = (ManifoldRect *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ManifoldRect **)&jarg1; 
  arg2 = *(ManifoldRect **)&jarg2; 
  result = (int)manifold_rect_contains_rect(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1rect_1include_1pt(JNIEnv *jenv, jclass jcls, jlong jarg1, jfloat jarg2, jfloat jarg3) {
  ManifoldRect *arg1 = (ManifoldRect *) 0 ;
  float arg2 ;
  float arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ManifoldRect **)&jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  manifold_rect_include_pt(arg1,arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1rect_1union(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  void *arg1 = (void *) 0 ;
  ManifoldRect *arg2 = (ManifoldRect *) 0 ;
  ManifoldRect *arg3 = (ManifoldRect *) 0 ;
  ManifoldRect *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  arg2 = *(ManifoldRect **)&jarg2; 
  arg3 = *(ManifoldRect **)&jarg3; 
  result = (ManifoldRect *)manifold_rect_union(arg1,arg2,arg3);
  *(ManifoldRect **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1rect_1transform(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5, jfloat jarg6, jfloat jarg7, jfloat jarg8) {
  jlong jresult = 0 ;
  void *arg1 = (void *) 0 ;
  ManifoldRect *arg2 = (ManifoldRect *) 0 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  float arg8 ;
  ManifoldRect *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  arg2 = *(ManifoldRect **)&jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  arg8 = (float)jarg8; 
  result = (ManifoldRect *)manifold_rect_transform(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  *(ManifoldRect **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1rect_1translate(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jfloat jarg3, jfloat jarg4) {
  jlong jresult = 0 ;
  void *arg1 = (void *) 0 ;
  ManifoldRect *arg2 = (ManifoldRect *) 0 ;
  float arg3 ;
  float arg4 ;
  ManifoldRect *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  arg2 = *(ManifoldRect **)&jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  result = (ManifoldRect *)manifold_rect_translate(arg1,arg2,arg3,arg4);
  *(ManifoldRect **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1rect_1mul(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jfloat jarg3, jfloat jarg4) {
  jlong jresult = 0 ;
  void *arg1 = (void *) 0 ;
  ManifoldRect *arg2 = (ManifoldRect *) 0 ;
  float arg3 ;
  float arg4 ;
  ManifoldRect *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  arg2 = *(ManifoldRect **)&jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  result = (ManifoldRect *)manifold_rect_mul(arg1,arg2,arg3,arg4);
  *(ManifoldRect **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1rect_1does_1overlap_1rect(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  ManifoldRect *arg1 = (ManifoldRect *) 0 ;
  ManifoldRect *arg2 = (ManifoldRect *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ManifoldRect **)&jarg1; 
  arg2 = *(ManifoldRect **)&jarg2; 
  result = (int)manifold_rect_does_overlap_rect(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1rect_1is_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  ManifoldRect *arg1 = (ManifoldRect *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ManifoldRect **)&jarg1; 
  result = (int)manifold_rect_is_empty(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1rect_1is_1finite(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  ManifoldRect *arg1 = (ManifoldRect *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ManifoldRect **)&jarg1; 
  result = (int)manifold_rect_is_finite(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1box(JNIEnv *jenv, jclass jcls, jlong jarg1, jfloat jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5, jfloat jarg6, jfloat jarg7) {
  jlong jresult = 0 ;
  void *arg1 = (void *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  ManifoldBox *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  result = (ManifoldBox *)manifold_box(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  *(ManifoldBox **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1box_1min(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  ManifoldBox *arg1 = (ManifoldBox *) 0 ;
  ManifoldVec3 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ManifoldBox **)&jarg1; 
  result = manifold_box_min(arg1);
  *(ManifoldVec3 **)&jresult = new ManifoldVec3(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1box_1max(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  ManifoldBox *arg1 = (ManifoldBox *) 0 ;
  ManifoldVec3 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ManifoldBox **)&jarg1; 
  result = manifold_box_max(arg1);
  *(ManifoldVec3 **)&jresult = new ManifoldVec3(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1box_1dimensions(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  ManifoldBox *arg1 = (ManifoldBox *) 0 ;
  ManifoldVec3 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ManifoldBox **)&jarg1; 
  result = manifold_box_dimensions(arg1);
  *(ManifoldVec3 **)&jresult = new ManifoldVec3(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1box_1center(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  ManifoldBox *arg1 = (ManifoldBox *) 0 ;
  ManifoldVec3 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ManifoldBox **)&jarg1; 
  result = manifold_box_center(arg1);
  *(ManifoldVec3 **)&jresult = new ManifoldVec3(result); 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1box_1scale(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jfloat jresult = 0 ;
  ManifoldBox *arg1 = (ManifoldBox *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ManifoldBox **)&jarg1; 
  result = (float)manifold_box_scale(arg1);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1box_1contains_1pt(JNIEnv *jenv, jclass jcls, jlong jarg1, jfloat jarg2, jfloat jarg3, jfloat jarg4) {
  jint jresult = 0 ;
  ManifoldBox *arg1 = (ManifoldBox *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ManifoldBox **)&jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  result = (int)manifold_box_contains_pt(arg1,arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1box_1contains_1box(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  ManifoldBox *arg1 = (ManifoldBox *) 0 ;
  ManifoldBox *arg2 = (ManifoldBox *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ManifoldBox **)&jarg1; 
  arg2 = *(ManifoldBox **)&jarg2; 
  result = (int)manifold_box_contains_box(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1box_1include_1pt(JNIEnv *jenv, jclass jcls, jlong jarg1, jfloat jarg2, jfloat jarg3, jfloat jarg4) {
  ManifoldBox *arg1 = (ManifoldBox *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ManifoldBox **)&jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  manifold_box_include_pt(arg1,arg2,arg3,arg4);
}


SWIGEXPORT jlong JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1box_1union(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  void *arg1 = (void *) 0 ;
  ManifoldBox *arg2 = (ManifoldBox *) 0 ;
  ManifoldBox *arg3 = (ManifoldBox *) 0 ;
  ManifoldBox *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  arg2 = *(ManifoldBox **)&jarg2; 
  arg3 = *(ManifoldBox **)&jarg3; 
  result = (ManifoldBox *)manifold_box_union(arg1,arg2,arg3);
  *(ManifoldBox **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1box_1transform(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5, jfloat jarg6, jfloat jarg7, jfloat jarg8, jfloat jarg9, jfloat jarg10, jfloat jarg11, jfloat jarg12, jfloat jarg13, jfloat jarg14) {
  jlong jresult = 0 ;
  void *arg1 = (void *) 0 ;
  ManifoldBox *arg2 = (ManifoldBox *) 0 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  float arg8 ;
  float arg9 ;
  float arg10 ;
  float arg11 ;
  float arg12 ;
  float arg13 ;
  float arg14 ;
  ManifoldBox *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  arg2 = *(ManifoldBox **)&jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  arg8 = (float)jarg8; 
  arg9 = (float)jarg9; 
  arg10 = (float)jarg10; 
  arg11 = (float)jarg11; 
  arg12 = (float)jarg12; 
  arg13 = (float)jarg13; 
  arg14 = (float)jarg14; 
  result = (ManifoldBox *)manifold_box_transform(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14);
  *(ManifoldBox **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1box_1translate(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5) {
  jlong jresult = 0 ;
  void *arg1 = (void *) 0 ;
  ManifoldBox *arg2 = (ManifoldBox *) 0 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  ManifoldBox *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  arg2 = *(ManifoldBox **)&jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  result = (ManifoldBox *)manifold_box_translate(arg1,arg2,arg3,arg4,arg5);
  *(ManifoldBox **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1box_1mul(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5) {
  jlong jresult = 0 ;
  void *arg1 = (void *) 0 ;
  ManifoldBox *arg2 = (ManifoldBox *) 0 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  ManifoldBox *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  arg2 = *(ManifoldBox **)&jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  result = (ManifoldBox *)manifold_box_mul(arg1,arg2,arg3,arg4,arg5);
  *(ManifoldBox **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1box_1does_1overlap_1pt(JNIEnv *jenv, jclass jcls, jlong jarg1, jfloat jarg2, jfloat jarg3, jfloat jarg4) {
  jint jresult = 0 ;
  ManifoldBox *arg1 = (ManifoldBox *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ManifoldBox **)&jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  result = (int)manifold_box_does_overlap_pt(arg1,arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1box_1does_1overlap_1box(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  ManifoldBox *arg1 = (ManifoldBox *) 0 ;
  ManifoldBox *arg2 = (ManifoldBox *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ManifoldBox **)&jarg1; 
  arg2 = *(ManifoldBox **)&jarg2; 
  result = (int)manifold_box_does_overlap_box(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1box_1is_1finite(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  ManifoldBox *arg1 = (ManifoldBox *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ManifoldBox **)&jarg1; 
  result = (int)manifold_box_is_finite(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1set_1min_1circular_1angle(JNIEnv *jenv, jclass jcls, jfloat jarg1) {
  float arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (float)jarg1; 
  manifold_set_min_circular_angle(arg1);
}


SWIGEXPORT void JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1set_1min_1circular_1edge_1length(JNIEnv *jenv, jclass jcls, jfloat jarg1) {
  float arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (float)jarg1; 
  manifold_set_min_circular_edge_length(arg1);
}


SWIGEXPORT void JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1set_1circular_1segments(JNIEnv *jenv, jclass jcls, jint jarg1) {
  int arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  manifold_set_circular_segments(arg1);
}


SWIGEXPORT jint JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1meshgl_1num_1prop(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  ManifoldMeshGL *arg1 = (ManifoldMeshGL *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ManifoldMeshGL **)&jarg1; 
  result = (int)manifold_meshgl_num_prop(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1meshgl_1num_1vert(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  ManifoldMeshGL *arg1 = (ManifoldMeshGL *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ManifoldMeshGL **)&jarg1; 
  result = (int)manifold_meshgl_num_vert(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1meshgl_1num_1tri(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  ManifoldMeshGL *arg1 = (ManifoldMeshGL *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ManifoldMeshGL **)&jarg1; 
  result = (int)manifold_meshgl_num_tri(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1meshgl_1vert_1properties_1length(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  ManifoldMeshGL *arg1 = (ManifoldMeshGL *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ManifoldMeshGL **)&jarg1; 
  result = manifold_meshgl_vert_properties_length(arg1);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1meshgl_1tri_1length(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  ManifoldMeshGL *arg1 = (ManifoldMeshGL *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ManifoldMeshGL **)&jarg1; 
  result = manifold_meshgl_tri_length(arg1);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1meshgl_1merge_1length(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  ManifoldMeshGL *arg1 = (ManifoldMeshGL *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ManifoldMeshGL **)&jarg1; 
  result = manifold_meshgl_merge_length(arg1);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1meshgl_1run_1index_1length(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  ManifoldMeshGL *arg1 = (ManifoldMeshGL *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ManifoldMeshGL **)&jarg1; 
  result = manifold_meshgl_run_index_length(arg1);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1meshgl_1run_1original_1id_1length(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  ManifoldMeshGL *arg1 = (ManifoldMeshGL *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ManifoldMeshGL **)&jarg1; 
  result = manifold_meshgl_run_original_id_length(arg1);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1meshgl_1run_1transform_1length(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  ManifoldMeshGL *arg1 = (ManifoldMeshGL *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ManifoldMeshGL **)&jarg1; 
  result = manifold_meshgl_run_transform_length(arg1);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1meshgl_1face_1id_1length(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  ManifoldMeshGL *arg1 = (ManifoldMeshGL *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ManifoldMeshGL **)&jarg1; 
  result = manifold_meshgl_face_id_length(arg1);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1meshgl_1tangent_1length(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  ManifoldMeshGL *arg1 = (ManifoldMeshGL *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ManifoldMeshGL **)&jarg1; 
  result = manifold_meshgl_tangent_length(arg1);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1meshgl_1vert_1properties(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  void *arg1 = (void *) 0 ;
  ManifoldMeshGL *arg2 = (ManifoldMeshGL *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  arg2 = *(ManifoldMeshGL **)&jarg2; 
  result = (float *)manifold_meshgl_vert_properties(arg1,arg2);
  *(float **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1meshgl_1tri_1verts(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  void *arg1 = (void *) 0 ;
  ManifoldMeshGL *arg2 = (ManifoldMeshGL *) 0 ;
  uint32_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  arg2 = *(ManifoldMeshGL **)&jarg2; 
  result = (uint32_t *)manifold_meshgl_tri_verts(arg1,arg2);
  *(uint32_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1meshgl_1merge_1from_1vert(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  void *arg1 = (void *) 0 ;
  ManifoldMeshGL *arg2 = (ManifoldMeshGL *) 0 ;
  uint32_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  arg2 = *(ManifoldMeshGL **)&jarg2; 
  result = (uint32_t *)manifold_meshgl_merge_from_vert(arg1,arg2);
  *(uint32_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1meshgl_1merge_1to_1vert(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  void *arg1 = (void *) 0 ;
  ManifoldMeshGL *arg2 = (ManifoldMeshGL *) 0 ;
  uint32_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  arg2 = *(ManifoldMeshGL **)&jarg2; 
  result = (uint32_t *)manifold_meshgl_merge_to_vert(arg1,arg2);
  *(uint32_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1meshgl_1run_1index(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  void *arg1 = (void *) 0 ;
  ManifoldMeshGL *arg2 = (ManifoldMeshGL *) 0 ;
  uint32_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  arg2 = *(ManifoldMeshGL **)&jarg2; 
  result = (uint32_t *)manifold_meshgl_run_index(arg1,arg2);
  *(uint32_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1meshgl_1run_1original_1id(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  void *arg1 = (void *) 0 ;
  ManifoldMeshGL *arg2 = (ManifoldMeshGL *) 0 ;
  uint32_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  arg2 = *(ManifoldMeshGL **)&jarg2; 
  result = (uint32_t *)manifold_meshgl_run_original_id(arg1,arg2);
  *(uint32_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1meshgl_1run_1transform(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  void *arg1 = (void *) 0 ;
  ManifoldMeshGL *arg2 = (ManifoldMeshGL *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  arg2 = *(ManifoldMeshGL **)&jarg2; 
  result = (float *)manifold_meshgl_run_transform(arg1,arg2);
  *(float **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1meshgl_1face_1id(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  void *arg1 = (void *) 0 ;
  ManifoldMeshGL *arg2 = (ManifoldMeshGL *) 0 ;
  uint32_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  arg2 = *(ManifoldMeshGL **)&jarg2; 
  result = (uint32_t *)manifold_meshgl_face_id(arg1,arg2);
  *(uint32_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1meshgl_1halfedge_1tangent(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  void *arg1 = (void *) 0 ;
  ManifoldMeshGL *arg2 = (ManifoldMeshGL *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  arg2 = *(ManifoldMeshGL **)&jarg2; 
  result = (float *)manifold_meshgl_halfedge_tangent(arg1,arg2);
  *(float **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1manifold_1size(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  result = manifold_manifold_size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1manifold_1vec_1size(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  result = manifold_manifold_vec_size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1cross_1section_1size(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  result = manifold_cross_section_size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1cross_1section_1vec_1size(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  result = manifold_cross_section_vec_size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1simple_1polygon_1size(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  result = manifold_simple_polygon_size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1polygons_1size(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  result = manifold_polygons_size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1manifold_1pair_1size(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  result = manifold_manifold_pair_size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1meshgl_1size(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  result = manifold_meshgl_size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1box_1size(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  result = manifold_box_size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1rect_1size(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  result = manifold_rect_size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1curvature_1size(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  result = manifold_curvature_size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1destruct_1manifold(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ManifoldManifold *arg1 = (ManifoldManifold *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ManifoldManifold **)&jarg1; 
  manifold_destruct_manifold(arg1);
}


SWIGEXPORT void JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1destruct_1manifold_1vec(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ManifoldManifoldVec *arg1 = (ManifoldManifoldVec *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ManifoldManifoldVec **)&jarg1; 
  manifold_destruct_manifold_vec(arg1);
}


SWIGEXPORT void JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1destruct_1cross_1section(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ManifoldCrossSection *arg1 = (ManifoldCrossSection *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ManifoldCrossSection **)&jarg1; 
  manifold_destruct_cross_section(arg1);
}


SWIGEXPORT void JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1destruct_1cross_1section_1vec(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ManifoldCrossSectionVec *arg1 = (ManifoldCrossSectionVec *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ManifoldCrossSectionVec **)&jarg1; 
  manifold_destruct_cross_section_vec(arg1);
}


SWIGEXPORT void JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1destruct_1simple_1polygon(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ManifoldSimplePolygon *arg1 = (ManifoldSimplePolygon *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ManifoldSimplePolygon **)&jarg1; 
  manifold_destruct_simple_polygon(arg1);
}


SWIGEXPORT void JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1destruct_1polygons(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ManifoldPolygons *arg1 = (ManifoldPolygons *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ManifoldPolygons **)&jarg1; 
  manifold_destruct_polygons(arg1);
}


SWIGEXPORT void JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1destruct_1meshgl(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ManifoldMeshGL *arg1 = (ManifoldMeshGL *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ManifoldMeshGL **)&jarg1; 
  manifold_destruct_meshgl(arg1);
}


SWIGEXPORT void JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1destruct_1box(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ManifoldBox *arg1 = (ManifoldBox *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ManifoldBox **)&jarg1; 
  manifold_destruct_box(arg1);
}


SWIGEXPORT void JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1destruct_1rect(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ManifoldRect *arg1 = (ManifoldRect *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ManifoldRect **)&jarg1; 
  manifold_destruct_rect(arg1);
}


SWIGEXPORT void JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1delete_1manifold(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ManifoldManifold *arg1 = (ManifoldManifold *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ManifoldManifold **)&jarg1; 
  manifold_delete_manifold(arg1);
}


SWIGEXPORT void JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1delete_1manifold_1vec(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ManifoldManifoldVec *arg1 = (ManifoldManifoldVec *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ManifoldManifoldVec **)&jarg1; 
  manifold_delete_manifold_vec(arg1);
}


SWIGEXPORT void JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1delete_1cross_1section(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ManifoldCrossSection *arg1 = (ManifoldCrossSection *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ManifoldCrossSection **)&jarg1; 
  manifold_delete_cross_section(arg1);
}


SWIGEXPORT void JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1delete_1cross_1section_1vec(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ManifoldCrossSectionVec *arg1 = (ManifoldCrossSectionVec *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ManifoldCrossSectionVec **)&jarg1; 
  manifold_delete_cross_section_vec(arg1);
}


SWIGEXPORT void JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1delete_1simple_1polygon(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ManifoldSimplePolygon *arg1 = (ManifoldSimplePolygon *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ManifoldSimplePolygon **)&jarg1; 
  manifold_delete_simple_polygon(arg1);
}


SWIGEXPORT void JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1delete_1polygons(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ManifoldPolygons *arg1 = (ManifoldPolygons *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ManifoldPolygons **)&jarg1; 
  manifold_delete_polygons(arg1);
}


SWIGEXPORT void JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1delete_1meshgl(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ManifoldMeshGL *arg1 = (ManifoldMeshGL *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ManifoldMeshGL **)&jarg1; 
  manifold_delete_meshgl(arg1);
}


SWIGEXPORT void JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1delete_1box(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ManifoldBox *arg1 = (ManifoldBox *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ManifoldBox **)&jarg1; 
  manifold_delete_box(arg1);
}


SWIGEXPORT void JNICALL Java_org_goodmath_jmanifold_ManifoldJNI_manifold_1delete_1rect(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ManifoldRect *arg1 = (ManifoldRect *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ManifoldRect **)&jarg1; 
  manifold_delete_rect(arg1);
}


#ifdef __cplusplus
}
#endif

