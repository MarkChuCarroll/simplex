package org.goodmath.simplex.jmanifold;

/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.2.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


@Suppress("removal")
class ManifoldManifoldPair(@Transient var swigCPtr: Long, @Transient var swigCMemOwn: Boolean) {

    companion object {
        fun getCPtr(obj: ManifoldManifoldPair?): Long {
            return obj?.swigCPtr ?: 0
        }

        fun swigRelease(obj: ManifoldManifoldPair?): Long {
            var ptr = 0L;
            if (obj != null) {
                if (!obj.swigCMemOwn)
                    throw RuntimeException ("Cannot release ownership as memory is not owned")
                ptr = obj.swigCPtr
                obj.swigCMemOwn = false
                obj.delete()
            }
            return ptr;
        }
    }


    fun finalize() {
        delete()
    }

    @Synchronized fun delete() {
        if (swigCPtr != 0L) {
            if (swigCMemOwn) {
                swigCMemOwn = false;
                JManifoldJNI.delete_ManifoldManifoldPair(swigCPtr);
            }
            swigCPtr = 0;
        }
    }

    fun setFirst(value: SWIGTYPE_p_ManifoldManifold) {
        JManifoldJNI.ManifoldManifoldPair_first_set(swigCPtr, this, SWIGTYPE_p_ManifoldManifold.getCPtr(value));
    }

    fun getFirst(): SWIGTYPE_p_ManifoldManifold? {
        val cPtr: Long = JManifoldJNI.ManifoldManifoldPair_first_get(swigCPtr, this)
        return if (cPtr == 0L) {
            null
        } else {
            SWIGTYPE_p_ManifoldManifold(cPtr, false)
        }
    }

    fun setSecond(value: SWIGTYPE_p_ManifoldManifold) {
        JManifoldJNI.ManifoldManifoldPair_second_set(swigCPtr, this, SWIGTYPE_p_ManifoldManifold.getCPtr(value));
    }

    fun getSecond(): SWIGTYPE_p_ManifoldManifold? {
        val cPtr: Long = JManifoldJNI.ManifoldManifoldPair_second_get(swigCPtr, this)
        return if (cPtr == 0L) {
            null
        } else {
            SWIGTYPE_p_ManifoldManifold(cPtr, false)
        }
    }

    constructor(): this(JManifoldJNI.new_ManifoldManifoldPair(), true) {}


}
