package org.goodmath.simplex.jmanifold

/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.2.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

object JManifold {
    fun simplePolygon(
        mem: SWIGTYPE_p_void,
        ps: ManifoldVec2,
        length: Long
    ): SWIGTYPE_p_ManifoldSimplePolygon? {
        val cPtr: Long? =
            JManifoldJNI.manifold_simple_polygon(SWIGTYPE_p_void.getCPtr(mem), ManifoldVec2.getCPtr(ps), ps, length)
        return if (cPtr == null || cPtr == 0L) {
            null
        } else {
            SWIGTYPE_p_ManifoldSimplePolygon(cPtr, false)
        }
    }

    fun polygons(
        mem: SWIGTYPE_p_void,
        ps: SWIGTYPE_p_p_ManifoldSimplePolygon,
        length: Long
    ): SWIGTYPE_p_ManifoldPolygons? {
        val cPtr = JManifoldJNI.manifold_polygons(
            SWIGTYPE_p_void.getCPtr(mem),
            SWIGTYPE_p_p_ManifoldSimplePolygon.getCPtr(ps),
            length
        )
        return SWIGTYPE_p_ManifoldPolygons(cPtr, false)
    }

    fun simplePolygonLength(p: SWIGTYPE_p_ManifoldSimplePolygon): Long {
        return JManifoldJNI.manifold_simple_polygon_length(SWIGTYPE_p_ManifoldSimplePolygon.getCPtr(p))
    }

    fun polygonsLength(ps: SWIGTYPE_p_ManifoldPolygons): Long {
        return JManifoldJNI.manifold_polygons_length(SWIGTYPE_p_ManifoldPolygons.getCPtr(ps))
    }

    fun polygonsSimpleLength(ps: SWIGTYPE_p_ManifoldPolygons, idx: Int): Long {
        return JManifoldJNI.manifold_polygons_simple_length(SWIGTYPE_p_ManifoldPolygons.getCPtr(ps), idx)
    }

    fun simplePolygonGetPoint(p: SWIGTYPE_p_ManifoldSimplePolygon, idx: Int): ManifoldVec2 {
        return ManifoldVec2(
            JManifoldJNI.manifold_simple_polygon_get_point(
                SWIGTYPE_p_ManifoldSimplePolygon.getCPtr(
                    p
                ), idx
            ), true
        )
    }

    fun polygonsGetSimple(
        mem: SWIGTYPE_p_void,
        ps: SWIGTYPE_p_ManifoldPolygons,
        idx: Int
    ): SWIGTYPE_p_ManifoldSimplePolygon? {
        val cPtr = JManifoldJNI.manifold_polygons_get_simple(
            SWIGTYPE_p_void.getCPtr(mem),
            SWIGTYPE_p_ManifoldPolygons.getCPtr(ps),
            idx
        )
        return if (cPtr == 0L) {
            null
        } else {
            SWIGTYPE_p_ManifoldSimplePolygon(cPtr, false)
        }
    }

    fun polygonsGetPoint(ps: SWIGTYPE_p_ManifoldPolygons, simple_idx: Int, pt_idx: Int): ManifoldVec2 {
        return ManifoldVec2(
            JManifoldJNI.manifold_polygons_get_point(
                SWIGTYPE_p_ManifoldPolygons.getCPtr(ps),
                simple_idx,
                pt_idx
            ), true)
    }

    fun meshGl(
        mem: SWIGTYPE_p_void,
        vert_props: SWIGTYPE_p_float,
        n_verts: Long,
        n_props: Long,
        tri_verts: SWIGTYPE_p_uint32_t,
        n_tris: Long
    ): SWIGTYPE_p_ManifoldMeshGL? {
        val cPtr: Long = JManifoldJNI.manifold_meshgl(
            SWIGTYPE_p_void.getCPtr(mem),
            SWIGTYPE_p_float.getCPtr(vert_props),
            n_verts,
            n_props,
            SWIGTYPE_p_uint32_t.getCPtr(tri_verts),
            n_tris
        )
        return if (cPtr == 0L) {
            null
        } else {
            SWIGTYPE_p_ManifoldMeshGL(cPtr, false)
        }
    }

    fun meshGlWTangents(
        mem: SWIGTYPE_p_void,
        vert_props: SWIGTYPE_p_float,
        n_verts: Long,
        n_props: Long,
        tri_verts: SWIGTYPE_p_uint32_t,
        n_tris: Long,
        halfedge_tangent: SWIGTYPE_p_float
    ): SWIGTYPE_p_ManifoldMeshGL? {
        val cPtr: Long = JManifoldJNI.manifold_meshgl_w_tangents(
            SWIGTYPE_p_void.getCPtr(mem),
            SWIGTYPE_p_float.getCPtr(vert_props),
            n_verts,
            n_props,
            SWIGTYPE_p_uint32_t.getCPtr(tri_verts),
            n_tris,
            SWIGTYPE_p_float.getCPtr(halfedge_tangent)
        )
        return if (cPtr == 0L) {
            null
        } else {
            SWIGTYPE_p_ManifoldMeshGL(cPtr, false)
        }
    }

    fun getMeshGl(mem: SWIGTYPE_p_void, m: SWIGTYPE_p_ManifoldManifold): SWIGTYPE_p_ManifoldMeshGL? {
        val cPtr: Long =
            JManifoldJNI.manifold_get_meshgl(SWIGTYPE_p_void.getCPtr(mem), SWIGTYPE_p_ManifoldManifold.getCPtr(m))
        return if (cPtr == 0L) {
            null
        } else {
            SWIGTYPE_p_ManifoldMeshGL(cPtr, false)
        }
    }

    fun meshGlCopy(mem: SWIGTYPE_p_void, m: SWIGTYPE_p_ManifoldMeshGL): SWIGTYPE_p_ManifoldMeshGL? {
        val cPtr: Long =
            JManifoldJNI.manifold_meshgl_copy(SWIGTYPE_p_void.getCPtr(mem), SWIGTYPE_p_ManifoldMeshGL.getCPtr(m))
        return if (cPtr == 0L) {
            null
        } else {
            SWIGTYPE_p_ManifoldMeshGL(cPtr, false)
        }
    }

    fun meshGlMerge(mem: SWIGTYPE_p_void, m: SWIGTYPE_p_ManifoldMeshGL): SWIGTYPE_p_ManifoldMeshGL? {
        val cPtr: Long =
            JManifoldJNI.manifold_meshgl_merge(SWIGTYPE_p_void.getCPtr(mem), SWIGTYPE_p_ManifoldMeshGL.getCPtr(m))
        return if (cPtr == 0L) {
            null
        } else {
            SWIGTYPE_p_ManifoldMeshGL(cPtr, false)
        }
    }

    fun levelSet(
        mem: SWIGTYPE_p_void,
        sdf: SWIGTYPE_p_f_float_float_float_p_void__float,
        bounds: SWIGTYPE_p_ManifoldBox,
        edge_length: Float,
        level: Float,
        precision: Float,
        ctx: SWIGTYPE_p_void
    ): SWIGTYPE_p_ManifoldMeshGL? {
        val cPtr: Long = JManifoldJNI.manifold_level_set(
            SWIGTYPE_p_void.getCPtr(mem),
            SWIGTYPE_p_f_float_float_float_p_void__float.getCPtr(sdf),
            SWIGTYPE_p_ManifoldBox.getCPtr(bounds),
            edge_length,
            level,
            precision,
            SWIGTYPE_p_void.getCPtr(ctx)
        )
        return if (cPtr == 0L) {
            null
        } else {
            SWIGTYPE_p_ManifoldMeshGL(cPtr, false)
        }
    }

    fun levelSetSeq(
        mem: SWIGTYPE_p_void,
        sdf: SWIGTYPE_p_f_float_float_float_p_void__float,
        bounds: SWIGTYPE_p_ManifoldBox,
        edge_length: Float,
        level: Float,
        precision: Float,
        ctx: SWIGTYPE_p_void
    ): SWIGTYPE_p_ManifoldMeshGL? {
        val cPtr: Long = JManifoldJNI.manifold_level_set_seq(
            SWIGTYPE_p_void.getCPtr(mem),
            SWIGTYPE_p_f_float_float_float_p_void__float.getCPtr(sdf),
            SWIGTYPE_p_ManifoldBox.getCPtr(bounds),
            edge_length,
            level,
            precision,
            SWIGTYPE_p_void.getCPtr(ctx)
        )
        return if (cPtr == 0L) {
            null
        } else {
            SWIGTYPE_p_ManifoldMeshGL(cPtr, false)
        }
    }

    fun manifoldEmptyVec(mem: SWIGTYPE_p_void): SWIGTYPE_p_ManifoldManifoldVec? {
        val cPtr: Long = JManifoldJNI.manifold_manifold_empty_vec(SWIGTYPE_p_void.getCPtr(mem))
        return if (cPtr == 0L) {
            null
        } else {
            SWIGTYPE_p_ManifoldManifoldVec(cPtr, false)
        }
    }

    fun manifoldVec(mem: SWIGTYPE_p_void, sz: Long): SWIGTYPE_p_ManifoldManifoldVec? {
        val cPtr: Long = JManifoldJNI.manifold_manifold_vec(SWIGTYPE_p_void.getCPtr(mem), sz)
        return if (cPtr == 0L) {
            null
        } else {
            SWIGTYPE_p_ManifoldManifoldVec(cPtr, false)
        }
    }

    fun manifoldVecReserve(ms: SWIGTYPE_p_ManifoldManifoldVec, sz: Long) {
        JManifoldJNI.manifold_manifold_vec_reserve(SWIGTYPE_p_ManifoldManifoldVec.getCPtr(ms), sz)
    }

    fun manifoldVecLength(ms: SWIGTYPE_p_ManifoldManifoldVec): Long? {
        return JManifoldJNI.manifold_manifold_vec_length(SWIGTYPE_p_ManifoldManifoldVec.getCPtr(ms))
    }

    fun manifoldVecGet(
        mem: SWIGTYPE_p_void,
        ms: SWIGTYPE_p_ManifoldManifoldVec,
        idx: Int
    ): SWIGTYPE_p_ManifoldManifold? {
        val cPtr: Long = JManifoldJNI.manifold_manifold_vec_get(
            SWIGTYPE_p_void.getCPtr(mem),
            SWIGTYPE_p_ManifoldManifoldVec.getCPtr(ms),
            idx
        )
        return if (cPtr == 0L) {
            null
        } else {
            SWIGTYPE_p_ManifoldManifold(cPtr, false)
        }
    }

    fun manifoldVecSet(ms: SWIGTYPE_p_ManifoldManifoldVec, idx: Int, m: SWIGTYPE_p_ManifoldManifold) {
        JManifoldJNI.manifold_manifold_vec_set(
            SWIGTYPE_p_ManifoldManifoldVec.getCPtr(ms),
            idx,
            SWIGTYPE_p_ManifoldManifold.getCPtr(m)
        )
    }

    fun manifoldVecPushBack(ms: SWIGTYPE_p_ManifoldManifoldVec, m: SWIGTYPE_p_ManifoldManifold) {
        JManifoldJNI.manifold_manifold_vec_push_back(
            SWIGTYPE_p_ManifoldManifoldVec.getCPtr(ms),
            SWIGTYPE_p_ManifoldManifold.getCPtr(m)
        )
    }

    fun boolean(
        mem: SWIGTYPE_p_void,
        a: SWIGTYPE_p_ManifoldManifold,
        b: SWIGTYPE_p_ManifoldManifold,
        op: ManifoldOpType
    ): SWIGTYPE_p_ManifoldManifold? {
        val cPtr: Long = JManifoldJNI.manifold_boolean(
            SWIGTYPE_p_void.getCPtr(mem),
            SWIGTYPE_p_ManifoldManifold.getCPtr(a),
            SWIGTYPE_p_ManifoldManifold.getCPtr(b),
            op.swigValue
        )
        return if (cPtr == 0L) {
            null
        } else {
            SWIGTYPE_p_ManifoldManifold(cPtr, false)
        }
    }

    fun batchBoolean(
        mem: SWIGTYPE_p_void,
        ms: SWIGTYPE_p_ManifoldManifoldVec,
        op: ManifoldOpType
    ): SWIGTYPE_p_ManifoldManifold? {
        val cPtr: Long = JManifoldJNI.manifold_batch_boolean(
            SWIGTYPE_p_void.getCPtr(mem),
            SWIGTYPE_p_ManifoldManifoldVec.getCPtr(ms),
            op.swigValue
        )
        return if (cPtr == 0L) {
            null
        } else {
            SWIGTYPE_p_ManifoldManifold(cPtr, false)
        }
    }

    fun union(
        mem: SWIGTYPE_p_void,
        a: SWIGTYPE_p_ManifoldManifold,
        b: SWIGTYPE_p_ManifoldManifold
    ): SWIGTYPE_p_ManifoldManifold? {
        val cPtr: Long = JManifoldJNI.manifold_union(
            SWIGTYPE_p_void.getCPtr(mem),
            SWIGTYPE_p_ManifoldManifold.getCPtr(a),
            SWIGTYPE_p_ManifoldManifold.getCPtr(b)
        )
        return if (cPtr == 0L) {
            null
        } else {
            SWIGTYPE_p_ManifoldManifold(cPtr, false)
        }
    }

    fun difference(
        mem: SWIGTYPE_p_void,
        a: SWIGTYPE_p_ManifoldManifold,
        b: SWIGTYPE_p_ManifoldManifold
    ): SWIGTYPE_p_ManifoldManifold? {
        val cPtr: Long = JManifoldJNI.manifold_difference(
            SWIGTYPE_p_void.getCPtr(mem),
            SWIGTYPE_p_ManifoldManifold.getCPtr(a),
            SWIGTYPE_p_ManifoldManifold.getCPtr(b)
        )
        return if (cPtr == 0L) {
            null
        } else {
            SWIGTYPE_p_ManifoldManifold(cPtr, false)
        }
    }

    fun intersection(
        mem: SWIGTYPE_p_void,
        a: SWIGTYPE_p_ManifoldManifold,
        b: SWIGTYPE_p_ManifoldManifold
    ): SWIGTYPE_p_ManifoldManifold? {
        val cPtr: Long = JManifoldJNI.manifold_intersection(
            SWIGTYPE_p_void.getCPtr(mem),
            SWIGTYPE_p_ManifoldManifold.getCPtr(a),
            SWIGTYPE_p_ManifoldManifold.getCPtr(b)
        )
        return if (cPtr == 0L) {
            null
        } else {
            SWIGTYPE_p_ManifoldManifold(cPtr, false)
        }
    }

    fun split(
        mem_first: SWIGTYPE_p_void,
        mem_second: SWIGTYPE_p_void,
        a: SWIGTYPE_p_ManifoldManifold,
        b: SWIGTYPE_p_ManifoldManifold
    ): ManifoldManifoldPair {
        return ManifoldManifoldPair(
            JManifoldJNI.manifold_split(
                SWIGTYPE_p_void.getCPtr(mem_first),
                SWIGTYPE_p_void.getCPtr(mem_second),
                SWIGTYPE_p_ManifoldManifold.getCPtr(a),
                SWIGTYPE_p_ManifoldManifold.getCPtr(b)
            ), true)
    }

    fun splitByPlane(
        mem_first: SWIGTYPE_p_void,
        mem_second: SWIGTYPE_p_void,
        m: SWIGTYPE_p_ManifoldManifold,
        normal_x: Float,
        normal_y: Float,
        normal_z: Float,
        offset: Float
    ): ManifoldManifoldPair {
        return ManifoldManifoldPair(
            JManifoldJNI.manifold_split_by_plane(
                SWIGTYPE_p_void.getCPtr(mem_first),
                SWIGTYPE_p_void.getCPtr(mem_second),
                SWIGTYPE_p_ManifoldManifold.getCPtr(m),
                normal_x,
                normal_y,
                normal_z,
                offset
            ), true)
    }

    fun trimByPlane(
        mem: SWIGTYPE_p_void,
        m: SWIGTYPE_p_ManifoldManifold,
        normal_x: Float,
        normal_y: Float,
        normal_z: Float,
        offset: Float
    ): SWIGTYPE_p_ManifoldManifold? {
        val cPtr: Long = JManifoldJNI.manifold_trim_by_plane(
            SWIGTYPE_p_void.getCPtr(mem),
            SWIGTYPE_p_ManifoldManifold.getCPtr(m),
            normal_x,
            normal_y,
            normal_z,
            offset
        )
        return if (cPtr == 0L) {
            null
        } else {
            SWIGTYPE_p_ManifoldManifold(cPtr, false)
        }
    }

    fun slice(
        mem: SWIGTYPE_p_void,
        m: SWIGTYPE_p_ManifoldManifold,
        height: Float
    ): SWIGTYPE_p_ManifoldPolygons? {
        val cPtr: Long =
            JManifoldJNI.manifold_slice(SWIGTYPE_p_void.getCPtr(mem), SWIGTYPE_p_ManifoldManifold.getCPtr(m), height)
        return if (cPtr == 0L) {
            null
        } else {
            SWIGTYPE_p_ManifoldPolygons(cPtr, false)
        }
    }

    fun project(mem: SWIGTYPE_p_void, m: SWIGTYPE_p_ManifoldManifold): SWIGTYPE_p_ManifoldPolygons? {
        val cPtr: Long =
            JManifoldJNI.manifold_project(SWIGTYPE_p_void.getCPtr(mem), SWIGTYPE_p_ManifoldManifold.getCPtr(m))
        return if (cPtr == 0L) {
            null
        } else {
            SWIGTYPE_p_ManifoldPolygons(cPtr, false)
        }
    }

    fun hull(mem: SWIGTYPE_p_void, m: SWIGTYPE_p_ManifoldManifold): SWIGTYPE_p_ManifoldManifold? {
        val cPtr: Long =
            JManifoldJNI.manifold_hull(SWIGTYPE_p_void.getCPtr(mem), SWIGTYPE_p_ManifoldManifold.getCPtr(m))
        return if (cPtr == 0L) {
            null
        } else {
            SWIGTYPE_p_ManifoldManifold(cPtr, false)
        }
    }

    fun batchHull(mem: SWIGTYPE_p_void, ms: SWIGTYPE_p_ManifoldManifoldVec): SWIGTYPE_p_ManifoldManifold? {
        val cPtr: Long =
            JManifoldJNI.manifold_batch_hull(SWIGTYPE_p_void.getCPtr(mem), SWIGTYPE_p_ManifoldManifoldVec.getCPtr(ms))
        return if (cPtr == 0L) {
            null
        } else {
            SWIGTYPE_p_ManifoldManifold(cPtr, false)
        }
    }

    fun hullPts(mem: SWIGTYPE_p_void, ps: ManifoldVec3, length: Long): SWIGTYPE_p_ManifoldManifold? {
        val cPtr: Long =
            JManifoldJNI.manifold_hull_pts(SWIGTYPE_p_void.getCPtr(mem), ManifoldVec3.getCPtr(ps), ps, length)
        return if (cPtr == 0L) {
            null
        } else {
            SWIGTYPE_p_ManifoldManifold(cPtr, false)
        }
    }

    fun translate(
        mem: SWIGTYPE_p_void,
        m: SWIGTYPE_p_ManifoldManifold,
        x: Float,
        y: Float,
        z: Float
    ): SWIGTYPE_p_ManifoldManifold? {
        val cPtr: Long = JManifoldJNI.manifold_translate(
            SWIGTYPE_p_void.getCPtr(mem),
            SWIGTYPE_p_ManifoldManifold.getCPtr(m),
            x,
            y,
            z
        )
        return if (cPtr == 0L) {
            null
        } else {
            SWIGTYPE_p_ManifoldManifold(cPtr, false)
        }
    }

    fun rotate(
        mem: SWIGTYPE_p_void,
        m: SWIGTYPE_p_ManifoldManifold,
        x: Float,
        y: Float,
        z: Float
    ): SWIGTYPE_p_ManifoldManifold? {
        val cPtr: Long = JManifoldJNI.manifold_rotate(
            SWIGTYPE_p_void.getCPtr(mem),
            SWIGTYPE_p_ManifoldManifold.getCPtr(m),
            x,
            y,
            z
        )
        return if (cPtr == 0L) {
            null
        } else {
            SWIGTYPE_p_ManifoldManifold(cPtr, false)
        }
    }

    fun scale(
        mem: SWIGTYPE_p_void,
        m: SWIGTYPE_p_ManifoldManifold,
        x: Float,
        y: Float,
        z: Float
    ): SWIGTYPE_p_ManifoldManifold? {
        val cPtr: Long =
            JManifoldJNI.manifold_scale(SWIGTYPE_p_void.getCPtr(mem), SWIGTYPE_p_ManifoldManifold.getCPtr(m), x, y, z)
        return if (cPtr == 0L) {
            null
        } else {
            SWIGTYPE_p_ManifoldManifold(cPtr, false)
        }
    }

    fun transform(
        mem: SWIGTYPE_p_void,
        m: SWIGTYPE_p_ManifoldManifold,
        x1: Float,
        y1: Float,
        z1: Float,
        x2: Float,
        y2: Float,
        z2: Float,
        x3: Float,
        y3: Float,
        z3: Float,
        x4: Float,
        y4: Float,
        z4: Float
    ): SWIGTYPE_p_ManifoldManifold? {
        val cPtr: Long = JManifoldJNI.manifold_transform(
            SWIGTYPE_p_void.getCPtr(mem),
            SWIGTYPE_p_ManifoldManifold.getCPtr(m),
            x1,
            y1,
            z1,
            x2,
            y2,
            z2,
            x3,
            y3,
            z3,
            x4,
            y4,
            z4
        )
        return if (cPtr == 0L) {
            null
        } else {
            SWIGTYPE_p_ManifoldManifold(cPtr, false)
        }
    }

    fun mirror(
        mem: SWIGTYPE_p_void,
        m: SWIGTYPE_p_ManifoldManifold,
        nx: Float,
        ny: Float,
        nz: Float
    ): SWIGTYPE_p_ManifoldManifold? {
        val cPtr: Long = JManifoldJNI.manifold_mirror(
            SWIGTYPE_p_void.getCPtr(mem),
            SWIGTYPE_p_ManifoldManifold.getCPtr(m),
            nx,
            ny,
            nz
        )
        return if (cPtr == 0L) {
            null
        } else {
            SWIGTYPE_p_ManifoldManifold(cPtr, false)
        }
    }

    fun warp(
        mem: SWIGTYPE_p_void,
        m: SWIGTYPE_p_ManifoldManifold,
        func: SWIGTYPE_p_f_float_float_float_p_void__ManifoldVec3,
        ctx: SWIGTYPE_p_void
    ): SWIGTYPE_p_ManifoldManifold? {
        val cPtr: Long = JManifoldJNI.manifold_warp(
            SWIGTYPE_p_void.getCPtr(mem),
            SWIGTYPE_p_ManifoldManifold.getCPtr(m),
            SWIGTYPE_p_f_float_float_float_p_void__ManifoldVec3.getCPtr(func),
            SWIGTYPE_p_void.getCPtr(ctx)
        )
        return if (cPtr == 0L) {
            null
        } else {
            SWIGTYPE_p_ManifoldManifold(cPtr, false)
        }
    }

    fun smoothByNormals(
        mem: SWIGTYPE_p_void,
        m: SWIGTYPE_p_ManifoldManifold,
        normalIdx: Int
    ): SWIGTYPE_p_ManifoldManifold? {
        val cPtr: Long = JManifoldJNI.manifold_smooth_by_normals(
            SWIGTYPE_p_void.getCPtr(mem),
            SWIGTYPE_p_ManifoldManifold.getCPtr(m),
            normalIdx
        )
        return if (cPtr == 0L) {
            null
        } else {
            SWIGTYPE_p_ManifoldManifold(cPtr, false)
        }
    }

    fun smoothOut(
        mem: SWIGTYPE_p_void,
        m: SWIGTYPE_p_ManifoldManifold,
        minSharpAngle: Float,
        minSmoothness: Float
    ): SWIGTYPE_p_ManifoldManifold? {
        val cPtr: Long = JManifoldJNI.manifold_smooth_out(
            SWIGTYPE_p_void.getCPtr(mem),
            SWIGTYPE_p_ManifoldManifold.getCPtr(m),
            minSharpAngle,
            minSmoothness
        )
        return if (cPtr == 0L) {
            null
        } else {
            SWIGTYPE_p_ManifoldManifold(cPtr, false)
        }
    }

    fun refine(
        mem: SWIGTYPE_p_void,
        m: SWIGTYPE_p_ManifoldManifold,
        refine: Int
    ): SWIGTYPE_p_ManifoldManifold? {
        val cPtr: Long =
            JManifoldJNI.manifold_refine(SWIGTYPE_p_void.getCPtr(mem), SWIGTYPE_p_ManifoldManifold.getCPtr(m), refine)
        return if (cPtr == 0L) {
            null
        } else {
            SWIGTYPE_p_ManifoldManifold(cPtr, false)
        }
    }

    fun refineToLength(
        mem: SWIGTYPE_p_void,
        m: SWIGTYPE_p_ManifoldManifold,
        length: Float
    ): SWIGTYPE_p_ManifoldManifold? {
        val cPtr: Long = JManifoldJNI.manifold_refine_to_length(
            SWIGTYPE_p_void.getCPtr(mem),
            SWIGTYPE_p_ManifoldManifold.getCPtr(m),
            length
        )
        return if (cPtr == 0L) {
            null
        } else {
            SWIGTYPE_p_ManifoldManifold(cPtr, false)
        }
    }

    fun empty(mem: SWIGTYPE_p_void): SWIGTYPE_p_ManifoldManifold? {
        val cPtr: Long = JManifoldJNI.manifold_empty(SWIGTYPE_p_void.getCPtr(mem))
        return if (cPtr == 0L) {
            null
        } else {
            SWIGTYPE_p_ManifoldManifold(cPtr, false)
        }
    }

    fun copy(mem: SWIGTYPE_p_void, m: SWIGTYPE_p_ManifoldManifold): SWIGTYPE_p_ManifoldManifold? {
        val cPtr: Long =
            JManifoldJNI.manifold_copy(SWIGTYPE_p_void.getCPtr(mem), SWIGTYPE_p_ManifoldManifold.getCPtr(m))
        return if (cPtr == 0L) {
            null
        } else {
            SWIGTYPE_p_ManifoldManifold(cPtr, false)
        }
    }

    fun tetrahedron(mem: SWIGTYPE_p_void): SWIGTYPE_p_ManifoldManifold? {
        val cPtr: Long = JManifoldJNI.manifold_tetrahedron(SWIGTYPE_p_void.getCPtr(mem))
        return if (cPtr == 0L) {
            null
        } else {
            SWIGTYPE_p_ManifoldManifold(cPtr, false)
        }
    }

    fun cube(mem: SWIGTYPE_p_void, x: Float, y: Float, z: Float, center: Int): SWIGTYPE_p_ManifoldManifold? {
        val cPtr: Long = JManifoldJNI.manifold_cube(SWIGTYPE_p_void.getCPtr(mem), x, y, z, center)
        return if (cPtr == 0L) {
            null
        } else {
            SWIGTYPE_p_ManifoldManifold(cPtr, false)
        }
    }

    fun cylinder(
        mem: SWIGTYPE_p_void, height: Float, radius_low: Float, radius_high: Float, circular_segments: Int, center: Int
    ): SWIGTYPE_p_ManifoldManifold? {
        val cPtr: Long = JManifoldJNI.manifold_cylinder(
            SWIGTYPE_p_void.getCPtr(mem),
            height,
            radius_low,
            radius_high,
            circular_segments,
            center
        )
        return if (cPtr == 0L) {
            null
        } else {
            SWIGTYPE_p_ManifoldManifold(cPtr, false)
        }
    }

    fun sphere(mem: SWIGTYPE_p_void, radius: Float, circular_segments: Int): SWIGTYPE_p_ManifoldManifold? {
        val cPtr: Long = JManifoldJNI.manifold_sphere(SWIGTYPE_p_void.getCPtr(mem), radius, circular_segments)
        return if (cPtr == 0L) {
            null
        } else {
            SWIGTYPE_p_ManifoldManifold(cPtr, false)
        }
    }

    fun ofMeshGl(mem: SWIGTYPE_p_void, mesh: SWIGTYPE_p_ManifoldMeshGL): SWIGTYPE_p_ManifoldManifold? {
        val cPtr: Long =
            JManifoldJNI.manifold_of_meshgl(SWIGTYPE_p_void.getCPtr(mem), SWIGTYPE_p_ManifoldMeshGL.getCPtr(mesh))
        return if (cPtr == 0L) {
            null
        } else {
            SWIGTYPE_p_ManifoldManifold(cPtr, false)
        }
    }

    fun smooth(
        mem: SWIGTYPE_p_void,
        mesh: SWIGTYPE_p_ManifoldMeshGL,
        half_edges: SWIGTYPE_p_size_t,
        smoothness: SWIGTYPE_p_float,
        n_idxs: Long
    ): SWIGTYPE_p_ManifoldManifold? {
        val cPtr: Long = JManifoldJNI.manifold_smooth(
            SWIGTYPE_p_void.getCPtr(mem),
            SWIGTYPE_p_ManifoldMeshGL.getCPtr(mesh),
            SWIGTYPE_p_size_t.getCPtr(half_edges),
            SWIGTYPE_p_float.getCPtr(smoothness),
            n_idxs
        )
        return if (cPtr == 0L) {
            null
        } else {
            SWIGTYPE_p_ManifoldManifold(cPtr, false)
        }
    }

    fun extrude(
        mem: SWIGTYPE_p_void,
        cs: SWIGTYPE_p_ManifoldPolygons,
        height: Float,
        slices: Int,
        twist_degrees: Float,
        scale_x: Float,
        scale_y: Float
    ): SWIGTYPE_p_ManifoldManifold? {
        val cPtr: Long = JManifoldJNI.manifold_extrude(
            SWIGTYPE_p_void.getCPtr(mem),
            SWIGTYPE_p_ManifoldPolygons.getCPtr(cs),
            height,
            slices,
            twist_degrees,
            scale_x,
            scale_y
        )
        return if (cPtr == 0L) {
            null
        } else {
            SWIGTYPE_p_ManifoldManifold(cPtr, false)
        }
    }

    fun revolve(
        mem: SWIGTYPE_p_void,
        cs: SWIGTYPE_p_ManifoldPolygons,
        circular_segments: Int
    ): SWIGTYPE_p_ManifoldManifold? {
        val cPtr: Long = JManifoldJNI.manifold_revolve(
            SWIGTYPE_p_void.getCPtr(mem),
            SWIGTYPE_p_ManifoldPolygons.getCPtr(cs),
            circular_segments
        )
        return if (cPtr == 0L) {
            null
        } else {
            SWIGTYPE_p_ManifoldManifold(cPtr, false)
        }
    }

    fun compose(mem: SWIGTYPE_p_void, ms: SWIGTYPE_p_ManifoldManifoldVec): SWIGTYPE_p_ManifoldManifold? {
        val cPtr: Long =
            JManifoldJNI.manifold_compose(SWIGTYPE_p_void.getCPtr(mem), SWIGTYPE_p_ManifoldManifoldVec.getCPtr(ms))
        return if (cPtr == 0L) {
            null
        } else {
            SWIGTYPE_p_ManifoldManifold(cPtr, false)
        }
    }

    fun decompose(mem: SWIGTYPE_p_void, m: SWIGTYPE_p_ManifoldManifold): SWIGTYPE_p_ManifoldManifoldVec? {
        val cPtr: Long =
            JManifoldJNI.manifold_decompose(SWIGTYPE_p_void.getCPtr(mem), SWIGTYPE_p_ManifoldManifold.getCPtr(m))
        return if (cPtr == 0L) {
            null
        } else {
            SWIGTYPE_p_ManifoldManifoldVec(cPtr, false)
        }
    }

    fun asOriginal(mem: SWIGTYPE_p_void, m: SWIGTYPE_p_ManifoldManifold): SWIGTYPE_p_ManifoldManifold? {
        val cPtr: Long =
            JManifoldJNI.manifold_as_original(SWIGTYPE_p_void.getCPtr(mem), SWIGTYPE_p_ManifoldManifold.getCPtr(m))
        return if (cPtr == 0L) {
            null
        } else {
            SWIGTYPE_p_ManifoldManifold(cPtr, false)
        }
    }

    fun isEmpty(m: SWIGTYPE_p_ManifoldManifold): Int {
        return JManifoldJNI.manifold_is_empty(SWIGTYPE_p_ManifoldManifold.getCPtr(m))
    }

    fun status(m: SWIGTYPE_p_ManifoldManifold): ManifoldError? {
        return ManifoldError.swigToEnum(JManifoldJNI.manifold_status(SWIGTYPE_p_ManifoldManifold.getCPtr(m)))
    }

    fun numVert(m: SWIGTYPE_p_ManifoldManifold): Int {
        return JManifoldJNI.manifold_num_vert(SWIGTYPE_p_ManifoldManifold.getCPtr(m))
    }

    fun numEdge(m: SWIGTYPE_p_ManifoldManifold): Int {
        return JManifoldJNI.manifold_num_edge(SWIGTYPE_p_ManifoldManifold.getCPtr(m))
    }

    fun numTri(m: SWIGTYPE_p_ManifoldManifold): Int {
        return JManifoldJNI.manifold_num_tri(SWIGTYPE_p_ManifoldManifold.getCPtr(m))
    }

    fun boundingBox(mem: SWIGTYPE_p_void, m: SWIGTYPE_p_ManifoldManifold): SWIGTYPE_p_ManifoldBox? {
        val cPtr: Long =
            JManifoldJNI.manifold_bounding_box(SWIGTYPE_p_void.getCPtr(mem), SWIGTYPE_p_ManifoldManifold.getCPtr(m))
        return if (cPtr == 0L) {
            null
        } else {
            SWIGTYPE_p_ManifoldBox(cPtr, false)
        }
    }

    fun precision(m: SWIGTYPE_p_ManifoldManifold): Float {
        return JManifoldJNI.manifold_precision(SWIGTYPE_p_ManifoldManifold.getCPtr(m))
    }

    fun genus(m: SWIGTYPE_p_ManifoldManifold): Int {
        return JManifoldJNI.manifold_genus(SWIGTYPE_p_ManifoldManifold.getCPtr(m))
    }

    fun getProperties(m: SWIGTYPE_p_ManifoldManifold): ManifoldProperties {
        return ManifoldProperties(JManifoldJNI.manifold_get_properties(SWIGTYPE_p_ManifoldManifold.getCPtr(m)), true)
    }

    fun getCircularSegments(radius: Float): Int {
        return JManifoldJNI.manifold_get_circular_segments(radius)
    }

    fun originalId(m: SWIGTYPE_p_ManifoldManifold): Int {
        return JManifoldJNI.manifold_original_id(SWIGTYPE_p_ManifoldManifold.getCPtr(m))
    }

    fun reserveIds(n: SWIGTYPE_p_uint32_t): SWIGTYPE_p_uint32_t {
        return SWIGTYPE_p_uint32_t(JManifoldJNI.manifold_reserve_ids(SWIGTYPE_p_uint32_t.getCPtr(n)), true)
    }

    fun setProperties(
        mem: SWIGTYPE_p_void,
        m: SWIGTYPE_p_ManifoldManifold,
        num_prop: Int,
        func: SWIGTYPE_p_f_p_float_ManifoldVec3_p_q_const__float_p_void__void,
        ctx: SWIGTYPE_p_void
    ): SWIGTYPE_p_ManifoldManifold? {
        val cPtr: Long = JManifoldJNI.manifold_set_properties(
            SWIGTYPE_p_void.getCPtr(mem),
            SWIGTYPE_p_ManifoldManifold.getCPtr(m),
            num_prop,
            SWIGTYPE_p_f_p_float_ManifoldVec3_p_q_const__float_p_void__void.getCPtr(func),
            SWIGTYPE_p_void.getCPtr(ctx)
        )
        return if (cPtr == 0L) {
            null
        } else {
            SWIGTYPE_p_ManifoldManifold(cPtr, false)
        }
    }

    fun calculateCurvature(
        mem: SWIGTYPE_p_void,
        m: SWIGTYPE_p_ManifoldManifold,
        gaussian_idx: Int,
        mean_idx: Int
    ): SWIGTYPE_p_ManifoldManifold? {
        val cPtr: Long = JManifoldJNI.manifold_calculate_curvature(
            SWIGTYPE_p_void.getCPtr(mem),
            SWIGTYPE_p_ManifoldManifold.getCPtr(m),
            gaussian_idx,
            mean_idx
        )
        return if (cPtr == 0L) {
            null
        } else {
            SWIGTYPE_p_ManifoldManifold(cPtr, false)
        }
    }

    fun minGap(
        m: SWIGTYPE_p_ManifoldManifold,
        other: SWIGTYPE_p_ManifoldManifold,
        searchLength: Float
    ): Float {
        return JManifoldJNI.manifold_min_gap(
            SWIGTYPE_p_ManifoldManifold.getCPtr(m),
            SWIGTYPE_p_ManifoldManifold.getCPtr(other),
            searchLength
        )
    }

    fun calculateNormals(
        mem: SWIGTYPE_p_void,
        m: SWIGTYPE_p_ManifoldManifold,
        normal_idx: Int,
        min_sharp_angle: Int
    ): SWIGTYPE_p_ManifoldManifold? {
        val cPtr: Long = JManifoldJNI.manifold_calculate_normals(
            SWIGTYPE_p_void.getCPtr(mem),
            SWIGTYPE_p_ManifoldManifold.getCPtr(m),
            normal_idx,
            min_sharp_angle
        )
        return if (cPtr == 0L) {
            null
        } else {
            SWIGTYPE_p_ManifoldManifold(cPtr, false)
        }
    }

    fun crossSectionEmpty(mem: SWIGTYPE_p_void): SWIGTYPE_p_ManifoldCrossSection? {
        val cPtr: Long = JManifoldJNI.manifold_cross_section_empty(SWIGTYPE_p_void.getCPtr(mem))
        return if (cPtr == 0L) {
            null
        } else {
            SWIGTYPE_p_ManifoldCrossSection(cPtr, false)
        }
    }

    fun crossSectionCopy(
        mem: SWIGTYPE_p_void,
        cs: SWIGTYPE_p_ManifoldCrossSection
    ): SWIGTYPE_p_ManifoldCrossSection? {
        val cPtr: Long = JManifoldJNI.manifold_cross_section_copy(
            SWIGTYPE_p_void.getCPtr(mem),
            SWIGTYPE_p_ManifoldCrossSection.getCPtr(cs)
        )
        return if (cPtr == 0L) {
            null
        } else {
            SWIGTYPE_p_ManifoldCrossSection(cPtr, false)
        }
    }

    fun crossSectionOfSimplePolygon(
        mem: SWIGTYPE_p_void,
        p: SWIGTYPE_p_ManifoldSimplePolygon,
        fr: ManifoldFillRule
    ): SWIGTYPE_p_ManifoldCrossSection? {
        val cPtr: Long = JManifoldJNI.manifold_cross_section_of_simple_polygon(
            SWIGTYPE_p_void.getCPtr(mem),
            SWIGTYPE_p_ManifoldSimplePolygon.getCPtr(p),
            fr.swigValue
        )
        return if (cPtr == 0L) {
            null
        } else {
            SWIGTYPE_p_ManifoldCrossSection(cPtr, false)
        }
    }

    fun crossSectionOfPolygons(
        mem: SWIGTYPE_p_void,
        p: SWIGTYPE_p_ManifoldPolygons,
        fr: ManifoldFillRule
    ): SWIGTYPE_p_ManifoldCrossSection? {
        val cPtr: Long = JManifoldJNI.manifold_cross_section_of_polygons(
            SWIGTYPE_p_void.getCPtr(mem),
            SWIGTYPE_p_ManifoldPolygons.getCPtr(p),
            fr.swigValue
        )
        return if (cPtr == 0L) {
            null
        } else {
            SWIGTYPE_p_ManifoldCrossSection(cPtr, false)
        }
    }

    fun crossSectionSquare(
        mem: SWIGTYPE_p_void,
        x: Float,
        y: Float,
        center: Int
    ): SWIGTYPE_p_ManifoldCrossSection? {
        val cPtr: Long = JManifoldJNI.manifold_cross_section_square(SWIGTYPE_p_void.getCPtr(mem), x, y, center)
        return if (cPtr == 0L) {
            null
        } else {
            SWIGTYPE_p_ManifoldCrossSection(cPtr, false)
        }
    }

    fun crossSectionCircle(
        mem: SWIGTYPE_p_void,
        radius: Float,
        circular_segments: Int
    ): SWIGTYPE_p_ManifoldCrossSection? {
        val cPtr: Long =
            JManifoldJNI.manifold_cross_section_circle(SWIGTYPE_p_void.getCPtr(mem), radius, circular_segments)
        return if (cPtr == 0L) {
            null
        } else {
            SWIGTYPE_p_ManifoldCrossSection(cPtr, false)
        }
    }

    fun crossSectionCompose(
        mem: SWIGTYPE_p_void,
        csv: SWIGTYPE_p_ManifoldCrossSectionVec
    ): SWIGTYPE_p_ManifoldCrossSection? {
        val cPtr: Long = JManifoldJNI.manifold_cross_section_compose(
            SWIGTYPE_p_void.getCPtr(mem),
            SWIGTYPE_p_ManifoldCrossSectionVec.getCPtr(csv)
        )
        return if (cPtr == 0L) {
            null
        } else {
            SWIGTYPE_p_ManifoldCrossSection(cPtr, false)
        }
    }

    fun crossSectionDecompose(
        mem: SWIGTYPE_p_void,
        cs: SWIGTYPE_p_ManifoldCrossSection
    ): SWIGTYPE_p_ManifoldCrossSectionVec? {
        val cPtr: Long = JManifoldJNI.manifold_cross_section_decompose(
            SWIGTYPE_p_void.getCPtr(mem),
            SWIGTYPE_p_ManifoldCrossSection.getCPtr(cs)
        )
        return if (cPtr == 0L) {
            null
        } else {
            SWIGTYPE_p_ManifoldCrossSectionVec(cPtr, false)
        }
    }

    fun crossSectionEmptyVec(mem: SWIGTYPE_p_void): SWIGTYPE_p_ManifoldCrossSectionVec? {
        val cPtr: Long = JManifoldJNI.manifold_cross_section_empty_vec(SWIGTYPE_p_void.getCPtr(mem))
        return if (cPtr == 0L) {
            null
        } else {
            SWIGTYPE_p_ManifoldCrossSectionVec(cPtr, false)
        }
    }

    fun crossSectionVec(mem: SWIGTYPE_p_void, sz: Long): SWIGTYPE_p_ManifoldCrossSectionVec? {
        val cPtr: Long = JManifoldJNI.manifold_cross_section_vec(SWIGTYPE_p_void.getCPtr(mem), sz)
        return if (cPtr == 0L) {
            null
        } else {
            SWIGTYPE_p_ManifoldCrossSectionVec(cPtr, false)
        }
    }

    fun crossSectionVecReserve(csv: SWIGTYPE_p_ManifoldCrossSectionVec, sz: Long) {
        JManifoldJNI.manifold_cross_section_vec_reserve(SWIGTYPE_p_ManifoldCrossSectionVec.getCPtr(csv), sz)
    }

    fun crossSectionVecLength(csv: SWIGTYPE_p_ManifoldCrossSectionVec): Long {
        return JManifoldJNI.manifold_cross_section_vec_length(SWIGTYPE_p_ManifoldCrossSectionVec.getCPtr(csv))
    }

    fun crossSectionVecGet(
        mem: SWIGTYPE_p_void,
        csv: SWIGTYPE_p_ManifoldCrossSectionVec,
        idx: Int
    ): SWIGTYPE_p_ManifoldCrossSection? {
        val cPtr: Long = JManifoldJNI.manifold_cross_section_vec_get(
            SWIGTYPE_p_void.getCPtr(mem),
            SWIGTYPE_p_ManifoldCrossSectionVec.getCPtr(csv),
            idx
        )
        return if (cPtr == 0L) {
            null
        } else {
            SWIGTYPE_p_ManifoldCrossSection(cPtr, false)
        }
    }

    fun crossSectionVecSet(
        csv: SWIGTYPE_p_ManifoldCrossSectionVec,
        idx: Int,
        cs: SWIGTYPE_p_ManifoldCrossSection
    ) {
        JManifoldJNI.manifold_cross_section_vec_set(
            SWIGTYPE_p_ManifoldCrossSectionVec.getCPtr(csv),
            idx,
            SWIGTYPE_p_ManifoldCrossSection.getCPtr(cs)
        )
    }

    fun crossSectionVecPushBack(
        csv: SWIGTYPE_p_ManifoldCrossSectionVec,
        cs: SWIGTYPE_p_ManifoldCrossSection
    ) {
        JManifoldJNI.manifold_cross_section_vec_push_back(
            SWIGTYPE_p_ManifoldCrossSectionVec.getCPtr(csv),
            SWIGTYPE_p_ManifoldCrossSection.getCPtr(cs)
        )
    }

    fun crossSectionBoolean(
        mem: SWIGTYPE_p_void,
        a: SWIGTYPE_p_ManifoldCrossSection,
        b: SWIGTYPE_p_ManifoldCrossSection,
        op: ManifoldOpType
    ): SWIGTYPE_p_ManifoldCrossSection? {
        val cPtr: Long = JManifoldJNI.manifold_cross_section_boolean(
            SWIGTYPE_p_void.getCPtr(mem),
            SWIGTYPE_p_ManifoldCrossSection.getCPtr(a),
            SWIGTYPE_p_ManifoldCrossSection.getCPtr(b),
            op.swigValue
        )
        return if (cPtr == 0L) {
            null
        } else {
            SWIGTYPE_p_ManifoldCrossSection(cPtr, false)
        }
    }

    fun crossSectionBatchBoolean(
        mem: SWIGTYPE_p_void,
        csv: SWIGTYPE_p_ManifoldCrossSectionVec,
        op: ManifoldOpType
    ): SWIGTYPE_p_ManifoldCrossSection? {
        val cPtr: Long = JManifoldJNI.manifold_cross_section_batch_boolean(
            SWIGTYPE_p_void.getCPtr(mem),
            SWIGTYPE_p_ManifoldCrossSectionVec.getCPtr(csv),
            op.swigValue
        )
        return if (cPtr == 0L) {
            null
        } else {
            SWIGTYPE_p_ManifoldCrossSection(cPtr, false)
        }
    }

    fun crossSectionUnion(
        mem: SWIGTYPE_p_void,
        a: SWIGTYPE_p_ManifoldCrossSection,
        b: SWIGTYPE_p_ManifoldCrossSection
    ): SWIGTYPE_p_ManifoldCrossSection? {
        val cPtr: Long = JManifoldJNI.manifold_cross_section_union(
            SWIGTYPE_p_void.getCPtr(mem),
            SWIGTYPE_p_ManifoldCrossSection.getCPtr(a),
            SWIGTYPE_p_ManifoldCrossSection.getCPtr(b)
        )
        return if (cPtr == 0L) {
            null
        } else {
            SWIGTYPE_p_ManifoldCrossSection(cPtr, false)
        }
    }

    fun crossSectionDifference(
        mem: SWIGTYPE_p_void,
        a: SWIGTYPE_p_ManifoldCrossSection,
        b: SWIGTYPE_p_ManifoldCrossSection
    ): SWIGTYPE_p_ManifoldCrossSection? {
        val cPtr: Long = JManifoldJNI.manifold_cross_section_difference(
            SWIGTYPE_p_void.getCPtr(mem),
            SWIGTYPE_p_ManifoldCrossSection.getCPtr(a),
            SWIGTYPE_p_ManifoldCrossSection.getCPtr(b)
        )
        return if (cPtr == 0L) {
            null
        } else {
            SWIGTYPE_p_ManifoldCrossSection(cPtr, false)
        }
    }

    fun crossSectionIntersection(
        mem: SWIGTYPE_p_void,
        a: SWIGTYPE_p_ManifoldCrossSection,
        b: SWIGTYPE_p_ManifoldCrossSection
    ): SWIGTYPE_p_ManifoldCrossSection? {
        val cPtr: Long = JManifoldJNI.manifold_cross_section_intersection(
            SWIGTYPE_p_void.getCPtr(mem),
            SWIGTYPE_p_ManifoldCrossSection.getCPtr(a),
            SWIGTYPE_p_ManifoldCrossSection.getCPtr(b)
        )
        return if (cPtr == 0L) {
            null
        } else {
            SWIGTYPE_p_ManifoldCrossSection(cPtr, false)
        }
    }

    fun crossSectionHull(
        mem: SWIGTYPE_p_void,
        cs: SWIGTYPE_p_ManifoldCrossSection
    ): SWIGTYPE_p_ManifoldCrossSection? {
        val cPtr: Long = JManifoldJNI.manifold_cross_section_hull(
            SWIGTYPE_p_void.getCPtr(mem),
            SWIGTYPE_p_ManifoldCrossSection.getCPtr(cs)
        )
        return if (cPtr == 0L) {
            null
        } else {
            SWIGTYPE_p_ManifoldCrossSection(cPtr, false)
        }
    }

    fun crossSectionBatchHull(
        mem: SWIGTYPE_p_void,
        css: SWIGTYPE_p_ManifoldCrossSectionVec
    ): SWIGTYPE_p_ManifoldCrossSection? {
        val cPtr: Long = JManifoldJNI.manifold_cross_section_batch_hull(
            SWIGTYPE_p_void.getCPtr(mem),
            SWIGTYPE_p_ManifoldCrossSectionVec.getCPtr(css)
        )
        return if (cPtr == 0L) {
            null
        } else {
            SWIGTYPE_p_ManifoldCrossSection(cPtr, false)
        }
    }

    fun crossSectionHullSimplePolygon(
        mem: SWIGTYPE_p_void,
        ps: SWIGTYPE_p_ManifoldSimplePolygon
    ): SWIGTYPE_p_ManifoldCrossSection? {
        val cPtr: Long = JManifoldJNI.manifold_cross_section_hull_simple_polygon(
            SWIGTYPE_p_void.getCPtr(mem),
            SWIGTYPE_p_ManifoldSimplePolygon.getCPtr(ps)
        )
        return if (cPtr == 0L) {
            null
        } else {
            SWIGTYPE_p_ManifoldCrossSection(cPtr, false)
        }
    }

    fun crossSectionHullPolygons(
        mem: SWIGTYPE_p_void,
        ps: SWIGTYPE_p_ManifoldPolygons
    ): SWIGTYPE_p_ManifoldCrossSection? {
        val cPtr: Long = JManifoldJNI.manifold_cross_section_hull_polygons(
            SWIGTYPE_p_void.getCPtr(mem),
            SWIGTYPE_p_ManifoldPolygons.getCPtr(ps)
        )
        return if (cPtr == 0L) {
            null
        } else {
            SWIGTYPE_p_ManifoldCrossSection(cPtr, false)
        }
    }

    fun crossSectionTranslate(
        mem: SWIGTYPE_p_void,
        cs: SWIGTYPE_p_ManifoldCrossSection,
        x: Float,
        y: Float
    ): SWIGTYPE_p_ManifoldCrossSection? {
        val cPtr: Long = JManifoldJNI.manifold_cross_section_translate(
            SWIGTYPE_p_void.getCPtr(mem),
            SWIGTYPE_p_ManifoldCrossSection.getCPtr(cs),
            x,
            y
        )
        return if (cPtr == 0L) {
            null
        } else {
            SWIGTYPE_p_ManifoldCrossSection(cPtr, false)
        }
    }

    fun crossSectionRotate(
        mem: SWIGTYPE_p_void,
        cs: SWIGTYPE_p_ManifoldCrossSection,
        deg: Float
    ): SWIGTYPE_p_ManifoldCrossSection? {
        val cPtr: Long = JManifoldJNI.manifold_cross_section_rotate(
            SWIGTYPE_p_void.getCPtr(mem),
            SWIGTYPE_p_ManifoldCrossSection.getCPtr(cs),
            deg
        )
        return if (cPtr == 0L) {
            null
        } else {
            SWIGTYPE_p_ManifoldCrossSection(cPtr, false)
        }
    }

    fun crossSectionScale(
        mem: SWIGTYPE_p_void,
        cs: SWIGTYPE_p_ManifoldCrossSection,
        x: Float,
        y: Float
    ): SWIGTYPE_p_ManifoldCrossSection? {
        val cPtr: Long = JManifoldJNI.manifold_cross_section_scale(
            SWIGTYPE_p_void.getCPtr(mem),
            SWIGTYPE_p_ManifoldCrossSection.getCPtr(cs),
            x,
            y
        )
        return if (cPtr == 0L) {
            null
        } else {
            SWIGTYPE_p_ManifoldCrossSection(cPtr, false)
        }
    }

    fun crossSectionMirror(
        mem: SWIGTYPE_p_void,
        cs: SWIGTYPE_p_ManifoldCrossSection,
        ax_x: Float,
        ax_y: Float
    ): SWIGTYPE_p_ManifoldCrossSection? {
        val cPtr: Long = JManifoldJNI.manifold_cross_section_mirror(
            SWIGTYPE_p_void.getCPtr(mem),
            SWIGTYPE_p_ManifoldCrossSection.getCPtr(cs),
            ax_x,
            ax_y
        )
        return if (cPtr == 0L) {
            null
        } else {
            SWIGTYPE_p_ManifoldCrossSection(cPtr, false)
        }
    }

    fun crossSectionTransform(
        mem: SWIGTYPE_p_void,
        cs: SWIGTYPE_p_ManifoldCrossSection,
        x1: Float,
        y1: Float,
        x2: Float,
        y2: Float,
        x3: Float,
        y3: Float
    ): SWIGTYPE_p_ManifoldCrossSection? {
        val cPtr: Long = JManifoldJNI.manifold_cross_section_transform(
            SWIGTYPE_p_void.getCPtr(mem),
            SWIGTYPE_p_ManifoldCrossSection.getCPtr(cs),
            x1,
            y1,
            x2,
            y2,
            x3,
            y3
        )
        return if (cPtr == 0L) {
            null
        } else {
            SWIGTYPE_p_ManifoldCrossSection(cPtr, false)
        }
    }

    fun crossSectionWarp(
        mem: SWIGTYPE_p_void,
        cs: SWIGTYPE_p_ManifoldCrossSection,
        func: SWIGTYPE_p_f_float_float__ManifoldVec2
    ): SWIGTYPE_p_ManifoldCrossSection? {
        val cPtr: Long = JManifoldJNI.manifold_cross_section_warp(
            SWIGTYPE_p_void.getCPtr(mem),
            SWIGTYPE_p_ManifoldCrossSection.getCPtr(cs),
            SWIGTYPE_p_f_float_float__ManifoldVec2.getCPtr(func)
        )
        return if (cPtr == 0L) {
            null
        } else {
            SWIGTYPE_p_ManifoldCrossSection(cPtr, false)
        }
    }

    fun crossSectionWarpContext(
        mem: SWIGTYPE_p_void,
        cs: SWIGTYPE_p_ManifoldCrossSection,
        func: SWIGTYPE_p_f_float_float_p_void__ManifoldVec2,
        ctx: SWIGTYPE_p_void
    ): SWIGTYPE_p_ManifoldCrossSection? {
        val cPtr: Long = JManifoldJNI.manifold_cross_section_warp_context(
            SWIGTYPE_p_void.getCPtr(mem),
            SWIGTYPE_p_ManifoldCrossSection.getCPtr(cs),
            SWIGTYPE_p_f_float_float_p_void__ManifoldVec2.getCPtr(func),
            SWIGTYPE_p_void.getCPtr(ctx)
        )
        return if (cPtr == 0L) {
            null
        } else {
            SWIGTYPE_p_ManifoldCrossSection(cPtr, false)
        }
    }

    fun crossSectionSimplify(
        mem: SWIGTYPE_p_void,
        cs: SWIGTYPE_p_ManifoldCrossSection,
        epsilon: Double
    ): SWIGTYPE_p_ManifoldCrossSection? {
        val cPtr: Long = JManifoldJNI.manifold_cross_section_simplify(
            SWIGTYPE_p_void.getCPtr(mem),
            SWIGTYPE_p_ManifoldCrossSection.getCPtr(cs),
            epsilon
        )
        return if (cPtr == 0L) {
            null
        } else {
            SWIGTYPE_p_ManifoldCrossSection(cPtr, false)
        }
    }

    fun crossSectionOffset(
        mem: SWIGTYPE_p_void,
        cs: SWIGTYPE_p_ManifoldCrossSection,
        delta: Double,
        jt: ManifoldJoinType,
        miter_limit: Double,
        circular_segments: Int
    ): SWIGTYPE_p_ManifoldCrossSection? {
        val cPtr: Long = JManifoldJNI.manifold_cross_section_offset(
            SWIGTYPE_p_void.getCPtr(mem),
            SWIGTYPE_p_ManifoldCrossSection.getCPtr(cs),
            delta,
            jt.swigValue,
            miter_limit,
            circular_segments
        )
        return if (cPtr == 0L) {
            null
        } else {
            SWIGTYPE_p_ManifoldCrossSection(cPtr, false)
        }
    }

    fun crossSectionArea(cs: SWIGTYPE_p_ManifoldCrossSection): Double {
        return JManifoldJNI.manifold_cross_section_area(SWIGTYPE_p_ManifoldCrossSection.getCPtr(cs))
    }

    fun crossSectionNumVert(cs: SWIGTYPE_p_ManifoldCrossSection): Int {
        return JManifoldJNI.manifold_cross_section_num_vert(SWIGTYPE_p_ManifoldCrossSection.getCPtr(cs))
    }

    fun crossSectionNumContour(cs: SWIGTYPE_p_ManifoldCrossSection): Int {
        return JManifoldJNI.manifold_cross_section_num_contour(SWIGTYPE_p_ManifoldCrossSection.getCPtr(cs))
    }

    fun crossSectionIsEmpty(cs: SWIGTYPE_p_ManifoldCrossSection): Int {
        return JManifoldJNI.manifold_cross_section_is_empty(SWIGTYPE_p_ManifoldCrossSection.getCPtr(cs))
    }

    fun crossSectionBounds(
        mem: SWIGTYPE_p_void,
        cs: SWIGTYPE_p_ManifoldCrossSection
    ): SWIGTYPE_p_ManifoldRect? {
        val cPtr: Long = JManifoldJNI.manifold_cross_section_bounds(
            SWIGTYPE_p_void.getCPtr(mem),
            SWIGTYPE_p_ManifoldCrossSection.getCPtr(cs)
        )
        return if (cPtr == 0L) {
            null
        } else {
            SWIGTYPE_p_ManifoldRect(cPtr, false)
        }
    }

    fun crossSectionToPolygons(
        mem: SWIGTYPE_p_void,
        cs: SWIGTYPE_p_ManifoldCrossSection
    ): SWIGTYPE_p_ManifoldPolygons? {
        val cPtr: Long = JManifoldJNI.manifold_cross_section_to_polygons(
            SWIGTYPE_p_void.getCPtr(mem),
            SWIGTYPE_p_ManifoldCrossSection.getCPtr(cs)
        )
        return if (cPtr == 0L) {
            null
        } else {
            SWIGTYPE_p_ManifoldPolygons(cPtr, false)
        }
    }

    fun rect(mem: SWIGTYPE_p_void, x1: Float, y1: Float, x2: Float, y2: Float): SWIGTYPE_p_ManifoldRect? {
        val cPtr: Long = JManifoldJNI.manifold_rect(SWIGTYPE_p_void.getCPtr(mem), x1, y1, x2, y2)
        return if (cPtr == 0L) {
            null
        } else {
            SWIGTYPE_p_ManifoldRect(cPtr, false)
        }
    }

    fun rectMin(r: SWIGTYPE_p_ManifoldRect): ManifoldVec2 {
        return ManifoldVec2(JManifoldJNI.manifold_rect_min(SWIGTYPE_p_ManifoldRect.getCPtr(r)), true)
    }

    fun rectMax(r: SWIGTYPE_p_ManifoldRect): ManifoldVec2 {
        return ManifoldVec2(JManifoldJNI.manifold_rect_max(SWIGTYPE_p_ManifoldRect.getCPtr(r)), true)
    }

    fun rectDimensions(r: SWIGTYPE_p_ManifoldRect): ManifoldVec2 {
        return ManifoldVec2(JManifoldJNI.manifold_rect_dimensions(SWIGTYPE_p_ManifoldRect.getCPtr(r)), true)
    }

    fun rectCenter(r: SWIGTYPE_p_ManifoldRect): ManifoldVec2 {
        return ManifoldVec2(JManifoldJNI.manifold_rect_center(SWIGTYPE_p_ManifoldRect.getCPtr(r)), true)
    }

    fun rectScale(r: SWIGTYPE_p_ManifoldRect): Float {
        return JManifoldJNI.manifold_rect_scale(SWIGTYPE_p_ManifoldRect.getCPtr(r))
    }

    fun rectContainsPt(r: SWIGTYPE_p_ManifoldRect, x: Float, y: Float): Int {
        return JManifoldJNI.manifold_rect_contains_pt(SWIGTYPE_p_ManifoldRect.getCPtr(r), x, y)
    }

    fun rectContainsRect(a: SWIGTYPE_p_ManifoldRect, b: SWIGTYPE_p_ManifoldRect): Int {
        return JManifoldJNI.manifold_rect_contains_rect(
            SWIGTYPE_p_ManifoldRect.getCPtr(a),
            SWIGTYPE_p_ManifoldRect.getCPtr(b),
        )
    }

    fun rectIncludePt(r: SWIGTYPE_p_ManifoldRect, x: Float, y: Float) {
        JManifoldJNI.manifold_rect_include_pt(SWIGTYPE_p_ManifoldRect.getCPtr(r), x, y)
    }

    fun rectUnion(
        mem: SWIGTYPE_p_void,
        a: SWIGTYPE_p_ManifoldRect,
        b: SWIGTYPE_p_ManifoldRect
    ): SWIGTYPE_p_ManifoldRect? {
        val cPtr: Long = JManifoldJNI.manifold_rect_union(
            SWIGTYPE_p_void.getCPtr(mem),
            SWIGTYPE_p_ManifoldRect.getCPtr(a),
            SWIGTYPE_p_ManifoldRect.getCPtr(b)
        )
        return if (cPtr == 0L) {
            null
        } else {
            SWIGTYPE_p_ManifoldRect(cPtr, false)
        }
    }

    fun rectTransform(
        mem: SWIGTYPE_p_void,
        r: SWIGTYPE_p_ManifoldRect,
        x1: Float,
        y1: Float,
        x2: Float,
        y2: Float,
        x3: Float,
        y3: Float
    ): SWIGTYPE_p_ManifoldRect? {
        val cPtr: Long = JManifoldJNI.manifold_rect_transform(
            SWIGTYPE_p_void.getCPtr(mem),
            SWIGTYPE_p_ManifoldRect.getCPtr(r),
            x1,
            y1,
            x2,
            y2,
            x3,
            y3
        )
        return if (cPtr == 0L) {
            null
        } else {
            SWIGTYPE_p_ManifoldRect(cPtr, false)
        }
    }

    fun rectTranslate(
        mem: SWIGTYPE_p_void,
        r: SWIGTYPE_p_ManifoldRect,
        x: Float,
        y: Float
    ): SWIGTYPE_p_ManifoldRect? {
        val cPtr: Long = JManifoldJNI.manifold_rect_translate(
            SWIGTYPE_p_void.getCPtr(mem),
            SWIGTYPE_p_ManifoldRect.getCPtr(r),
            x,
            y
        )
        return if (cPtr == 0L) {
            null
        } else {
            SWIGTYPE_p_ManifoldRect(cPtr, false)
        }
    }

    fun rectMul(
        mem: SWIGTYPE_p_void,
        r: SWIGTYPE_p_ManifoldRect,
        x: Float,
        y: Float
    ): SWIGTYPE_p_ManifoldRect? {
        val cPtr: Long =
            JManifoldJNI.manifold_rect_mul(SWIGTYPE_p_void.getCPtr(mem), SWIGTYPE_p_ManifoldRect.getCPtr(r), x, y)
        return if (cPtr == 0L) {
            null
        } else {
            SWIGTYPE_p_ManifoldRect(cPtr, false)
        }
    }

    fun rectDoesOverlapRect(a: SWIGTYPE_p_ManifoldRect, r: SWIGTYPE_p_ManifoldRect): Int {
        return JManifoldJNI.manifold_rect_does_overlap_rect(
            SWIGTYPE_p_ManifoldRect.getCPtr(a),
            SWIGTYPE_p_ManifoldRect.getCPtr(r)
        )
    }

    fun rectIsEmpty(r: SWIGTYPE_p_ManifoldRect): Int {
        return JManifoldJNI.manifold_rect_is_empty(SWIGTYPE_p_ManifoldRect.getCPtr(r))
    }

    fun rectIsFinite(r: SWIGTYPE_p_ManifoldRect): Int {
        return JManifoldJNI.manifold_rect_is_finite(SWIGTYPE_p_ManifoldRect.getCPtr(r))
    }

    fun box(
        mem: SWIGTYPE_p_void,
        x1: Float,
        y1: Float,
        z1: Float,
        x2: Float,
        y2: Float,
        z2: Float
    ): SWIGTYPE_p_ManifoldBox? {
        val cPtr: Long = JManifoldJNI.manifold_box(SWIGTYPE_p_void.getCPtr(mem), x1, y1, z1, x2, y2, z2)
        return if (cPtr == 0L) {
            null
        } else {
            SWIGTYPE_p_ManifoldBox(cPtr, false)
        }
    }

    fun boxMin(b: SWIGTYPE_p_ManifoldBox): ManifoldVec3 {
        return ManifoldVec3(JManifoldJNI.manifold_box_min(SWIGTYPE_p_ManifoldBox.getCPtr(b)), true)
    }

    fun boxMax(b: SWIGTYPE_p_ManifoldBox): ManifoldVec3 {
        return ManifoldVec3(JManifoldJNI.manifold_box_max(SWIGTYPE_p_ManifoldBox.getCPtr(b)), true)
    }

    fun boxDimensions(b: SWIGTYPE_p_ManifoldBox): ManifoldVec3 {
        return ManifoldVec3(JManifoldJNI.manifold_box_dimensions(SWIGTYPE_p_ManifoldBox.getCPtr(b)), true)
    }

    fun boxCenter(b: SWIGTYPE_p_ManifoldBox): ManifoldVec3 {
        return ManifoldVec3(JManifoldJNI.manifold_box_center(SWIGTYPE_p_ManifoldBox.getCPtr(b)), true)
    }

    fun boxScale(b: SWIGTYPE_p_ManifoldBox): Float {
        return JManifoldJNI.manifold_box_scale(SWIGTYPE_p_ManifoldBox.getCPtr(b))
    }

    fun boxContainsPt(b: SWIGTYPE_p_ManifoldBox, x: Float, y: Float, z: Float): Int {
        return JManifoldJNI.manifold_box_contains_pt(SWIGTYPE_p_ManifoldBox.getCPtr(b), x, y, z)
    }

    fun boxContainsBox(a: SWIGTYPE_p_ManifoldBox, b: SWIGTYPE_p_ManifoldBox): Int {
        return JManifoldJNI.manifold_box_contains_box(
            SWIGTYPE_p_ManifoldBox.getCPtr(a),
            SWIGTYPE_p_ManifoldBox.getCPtr(b)
        )
    }

    fun boxIncludePt(b: SWIGTYPE_p_ManifoldBox, x: Float, y: Float, z: Float) {
        JManifoldJNI.manifold_box_include_pt(SWIGTYPE_p_ManifoldBox.getCPtr(b), x, y, z)
    }

    fun boxUnion(
        mem: SWIGTYPE_p_void,
        a: SWIGTYPE_p_ManifoldBox,
        b: SWIGTYPE_p_ManifoldBox
    ): SWIGTYPE_p_ManifoldBox? {
        val cPtr: Long = JManifoldJNI.manifold_box_union(
            SWIGTYPE_p_void.getCPtr(mem),
            SWIGTYPE_p_ManifoldBox.getCPtr(a),
            SWIGTYPE_p_ManifoldBox.getCPtr(b)
        )
        return if (cPtr == 0L) {
            null
        } else {
            SWIGTYPE_p_ManifoldBox(cPtr, false)
        }
    }

    fun boxTransform(
        mem: SWIGTYPE_p_void,
        b: SWIGTYPE_p_ManifoldBox,
        x1: Float,
        y1: Float,
        z1: Float,
        x2: Float,
        y2: Float,
        z2: Float,
        x3: Float,
        y3: Float,
        z3: Float,
        x4: Float,
        y4: Float,
        z4: Float
    ): SWIGTYPE_p_ManifoldBox? {
        val cPtr: Long = JManifoldJNI.manifold_box_transform(
            SWIGTYPE_p_void.getCPtr(mem),
            SWIGTYPE_p_ManifoldBox.getCPtr(b),
            x1,
            y1,
            z1,
            x2,
            y2,
            z2,
            x3,
            y3,
            z3,
            x4,
            y4,
            z4
        )
        return if (cPtr == 0L) {
            null
        } else {
            SWIGTYPE_p_ManifoldBox(cPtr, false)
        }
    }

    fun boxTranslate(
        mem: SWIGTYPE_p_void,
        b: SWIGTYPE_p_ManifoldBox,
        x: Float,
        y: Float,
        z: Float
    ): SWIGTYPE_p_ManifoldBox? {
        val cPtr: Long = JManifoldJNI.manifold_box_translate(
            SWIGTYPE_p_void.getCPtr(mem),
            SWIGTYPE_p_ManifoldBox.getCPtr(b),
            x,
            y,
            z
        )
        return if (cPtr == 0L) {
            null
        } else {
            SWIGTYPE_p_ManifoldBox(cPtr, false)
        }
    }

    fun boxMul(
        mem: SWIGTYPE_p_void,
        b: SWIGTYPE_p_ManifoldBox,
        x: Float,
        y: Float,
        z: Float
    ): SWIGTYPE_p_ManifoldBox? {
        val cPtr: Long =
            JManifoldJNI.manifold_box_mul(SWIGTYPE_p_void.getCPtr(mem), SWIGTYPE_p_ManifoldBox.getCPtr(b), x, y, z)
        return if (cPtr == 0L) {
            null
        } else {
            SWIGTYPE_p_ManifoldBox(cPtr, false)
        }
    }

    fun boxDoesOverlapPt(b: SWIGTYPE_p_ManifoldBox, x: Float, y: Float, z: Float): Int {
        return JManifoldJNI.manifold_box_does_overlap_pt(SWIGTYPE_p_ManifoldBox.getCPtr(b), x, y, z)
    }

    fun boxDoesOverlapBox(a: SWIGTYPE_p_ManifoldBox, b: SWIGTYPE_p_ManifoldBox): Int {
        return JManifoldJNI.manifold_box_does_overlap_box(
            SWIGTYPE_p_ManifoldBox.getCPtr(a),
            SWIGTYPE_p_ManifoldBox.getCPtr(b)
        )
    }

    fun boxIsFinite(b: SWIGTYPE_p_ManifoldBox): Int {
        return JManifoldJNI.manifold_box_is_finite(SWIGTYPE_p_ManifoldBox.getCPtr(b))
    }

    fun setMinCircularAngle(degrees: Float) {
        JManifoldJNI.manifold_set_min_circular_angle(degrees)
    }

    fun setMinCircularEdgeLength(length: Float) {
        JManifoldJNI.manifold_set_min_circular_edge_length(length)
    }

    fun setCircularSegments(
        number: Int
    ) {
        JManifoldJNI.manifold_set_circular_segments(number)
    }

    fun meshGlNumProp(m: SWIGTYPE_p_ManifoldMeshGL): Int {
        return JManifoldJNI.manifold_meshgl_num_prop(SWIGTYPE_p_ManifoldMeshGL.getCPtr(m))
    }

    fun meshGlNumVert(m: SWIGTYPE_p_ManifoldMeshGL): Int {
        return JManifoldJNI.manifold_meshgl_num_vert(SWIGTYPE_p_ManifoldMeshGL.getCPtr(m))
    }

    fun meshGlNumTri(m: SWIGTYPE_p_ManifoldMeshGL): Int {
        return JManifoldJNI.manifold_meshgl_num_tri(SWIGTYPE_p_ManifoldMeshGL.getCPtr(m))
    }

    fun meshGlVertPropertiesLength(m: SWIGTYPE_p_ManifoldMeshGL): Long {
        return JManifoldJNI.manifold_meshgl_vert_properties_length(SWIGTYPE_p_ManifoldMeshGL.getCPtr(m))
    }

    fun meshGlTriLength(m: SWIGTYPE_p_ManifoldMeshGL): Long {
        return JManifoldJNI.manifold_meshgl_tri_length(SWIGTYPE_p_ManifoldMeshGL.getCPtr(m))

    }

    fun meshGlMergeLength(m: SWIGTYPE_p_ManifoldMeshGL): Long {
        return JManifoldJNI.manifold_meshgl_merge_length(SWIGTYPE_p_ManifoldMeshGL.getCPtr(m))
    }

    fun meshGlRunIndexLength(m: SWIGTYPE_p_ManifoldMeshGL): Long {
        return JManifoldJNI.manifold_meshgl_run_index_length(SWIGTYPE_p_ManifoldMeshGL.getCPtr(m))
    }

    fun meshGlRunOriginalIdLength(m: SWIGTYPE_p_ManifoldMeshGL): Long {
        return JManifoldJNI.manifold_meshgl_run_original_id_length(SWIGTYPE_p_ManifoldMeshGL.getCPtr(m))
    }

    fun meshGlRunTransformLength(m: SWIGTYPE_p_ManifoldMeshGL): Long {
        return JManifoldJNI.manifold_meshgl_run_transform_length(SWIGTYPE_p_ManifoldMeshGL.getCPtr(m))
    }

    fun meshGlFaceIdLength(m: SWIGTYPE_p_ManifoldMeshGL): Long {
        return JManifoldJNI.manifold_meshgl_face_id_length(SWIGTYPE_p_ManifoldMeshGL.getCPtr(m))
    }

    fun meshGlTangentLength(m: SWIGTYPE_p_ManifoldMeshGL): Long {
        return JManifoldJNI.manifold_meshgl_tangent_length(SWIGTYPE_p_ManifoldMeshGL.getCPtr(m))
    }

    fun meshGlVertProperties(mem: SWIGTYPE_p_void, m: SWIGTYPE_p_ManifoldMeshGL): SWIGTYPE_p_float? {
        val cPtr: Long = JManifoldJNI.manifold_meshgl_vert_properties(
            SWIGTYPE_p_void.getCPtr(mem),
            SWIGTYPE_p_ManifoldMeshGL.getCPtr(m)
        )
        return if (cPtr == 0L) {
            null
        } else {
            SWIGTYPE_p_float(cPtr, false)
        }
    }

    fun meshGlTriVerts(mem: SWIGTYPE_p_void, m: SWIGTYPE_p_ManifoldMeshGL): SWIGTYPE_p_uint32_t? {
        val cPtr: Long =
            JManifoldJNI.manifold_meshgl_tri_verts(SWIGTYPE_p_void.getCPtr(mem), SWIGTYPE_p_ManifoldMeshGL.getCPtr(m))
        return if (cPtr == 0L) {
            null
        } else {
            SWIGTYPE_p_uint32_t(cPtr, false)
        }
    }

    fun meshGlMergeFromVert(mem: SWIGTYPE_p_void, m: SWIGTYPE_p_ManifoldMeshGL): SWIGTYPE_p_uint32_t? {
        val cPtr: Long = JManifoldJNI.manifold_meshgl_merge_from_vert(
            SWIGTYPE_p_void.getCPtr(mem),
            SWIGTYPE_p_ManifoldMeshGL.getCPtr(m)
        )
        return if (cPtr == 0L) {
            null
        } else {
            SWIGTYPE_p_uint32_t(cPtr, false)
        }
    }

    fun meshGlMergeToVert(mem: SWIGTYPE_p_void, m: SWIGTYPE_p_ManifoldMeshGL): SWIGTYPE_p_uint32_t? {
        val cPtr: Long = JManifoldJNI.manifold_meshgl_merge_to_vert(
            SWIGTYPE_p_void.getCPtr(mem),
            SWIGTYPE_p_ManifoldMeshGL.getCPtr(m)
        )
        return if (cPtr == 0L) {
            null
        } else {
            SWIGTYPE_p_uint32_t(cPtr, false)
        }
    }

    fun meshGlRunIndex(mem: SWIGTYPE_p_void, m: SWIGTYPE_p_ManifoldMeshGL): SWIGTYPE_p_uint32_t? {
        val cPtr: Long =
            JManifoldJNI.manifold_meshgl_run_index(SWIGTYPE_p_void.getCPtr(mem), SWIGTYPE_p_ManifoldMeshGL.getCPtr(m))
        return if (cPtr == 0L) {
            null
        } else {
            SWIGTYPE_p_uint32_t(cPtr, false)
        }
    }

    fun meshGlRunOriginalId(mem: SWIGTYPE_p_void, m: SWIGTYPE_p_ManifoldMeshGL): SWIGTYPE_p_uint32_t? {
        val cPtr: Long = JManifoldJNI.manifold_meshgl_run_original_id(
            SWIGTYPE_p_void.getCPtr(mem),
            SWIGTYPE_p_ManifoldMeshGL.getCPtr(m)
        )
        return if (cPtr == 0L) {
            null
        } else {
            SWIGTYPE_p_uint32_t(cPtr, false)
        }
    }

    fun meshGlRunTransform(mem: SWIGTYPE_p_void, m: SWIGTYPE_p_ManifoldMeshGL): SWIGTYPE_p_float? {
        val cPtr: Long = JManifoldJNI.manifold_meshgl_run_transform(
            SWIGTYPE_p_void.getCPtr(mem),
            SWIGTYPE_p_ManifoldMeshGL.getCPtr(m)
        )
        return if (cPtr == 0L) {
            null
        } else {
            SWIGTYPE_p_float(cPtr, false)
        }
    }

    fun meshGlFaceId(mem: SWIGTYPE_p_void, m: SWIGTYPE_p_ManifoldMeshGL): SWIGTYPE_p_uint32_t? {
        val cPtr: Long =
            JManifoldJNI.manifold_meshgl_face_id(SWIGTYPE_p_void.getCPtr(mem), SWIGTYPE_p_ManifoldMeshGL.getCPtr(m))
        return if (cPtr == 0L) {
            null
        } else {
            SWIGTYPE_p_uint32_t(cPtr, false)
        }
    }

    fun meshGlHalfedgeTangent(mem: SWIGTYPE_p_void, m: SWIGTYPE_p_ManifoldMeshGL): SWIGTYPE_p_float? {
        val cPtr: Long = JManifoldJNI.manifold_meshgl_halfedge_tangent(
            SWIGTYPE_p_void.getCPtr(mem),
            SWIGTYPE_p_ManifoldMeshGL.getCPtr(m)
        )
        return if (cPtr == 0L) {
            null
        } else {
            SWIGTYPE_p_float(cPtr, false)
        }
    }

    fun manifoldSize(): Long {
        return JManifoldJNI.manifold_manifold_size()
    }

    fun manifoldVecSize(): Long {
        return JManifoldJNI.manifold_manifold_vec_size()
    }

    fun crossSectionSize(): Long {
        return JManifoldJNI.manifold_cross_section_size()
    }

    fun crossSectionVecSize(): Long {
        return JManifoldJNI.manifold_cross_section_vec_size()
    }

    fun simplePolygonSize(): Long {
        return JManifoldJNI.manifold_simple_polygon_size()
    }

    fun polygonsSize(): Long {
        return JManifoldJNI.manifold_polygons_size()
    }

    fun manifoldPairSize(): Long {
        return JManifoldJNI.manifold_manifold_pair_size()
    }

    fun meshGlSize(): Long {
        return JManifoldJNI.manifold_meshgl_size()
    }

    fun boxSize(): Long {
        return JManifoldJNI.manifold_box_size()
    }

    fun rectSize(): Long {
        return JManifoldJNI.manifold_rect_size()
    }

    fun curvatureSize(): Long {
        return JManifoldJNI.manifold_curvature_size()
    }

    fun destructManifold(m: SWIGTYPE_p_ManifoldManifold) {
        JManifoldJNI.manifold_destruct_manifold(SWIGTYPE_p_ManifoldManifold.getCPtr(m))
    }

    fun destructManifoldVec(ms: SWIGTYPE_p_ManifoldManifoldVec) {
        JManifoldJNI.manifold_destruct_manifold_vec(SWIGTYPE_p_ManifoldManifoldVec.getCPtr(ms))
    }

    fun destructCrossSection(m: SWIGTYPE_p_ManifoldCrossSection) {
        JManifoldJNI.manifold_destruct_cross_section(SWIGTYPE_p_ManifoldCrossSection.getCPtr(m))
    }

    fun destructCrossSectionVec(csv: SWIGTYPE_p_ManifoldCrossSectionVec) {
        JManifoldJNI.manifold_destruct_cross_section_vec(SWIGTYPE_p_ManifoldCrossSectionVec.getCPtr(csv))
    }

    fun destructSimplePolygon(p: SWIGTYPE_p_ManifoldSimplePolygon) {
        JManifoldJNI.manifold_destruct_simple_polygon(SWIGTYPE_p_ManifoldSimplePolygon.getCPtr(p))
    }

    fun destructPolygons(p: SWIGTYPE_p_ManifoldPolygons) {
        JManifoldJNI.manifold_destruct_polygons(SWIGTYPE_p_ManifoldPolygons.getCPtr(p))
    }

    fun destructMeshGl(m: SWIGTYPE_p_ManifoldMeshGL) {
        JManifoldJNI.manifold_destruct_meshgl(SWIGTYPE_p_ManifoldMeshGL.getCPtr(m))
    }

    fun destructBox(b: SWIGTYPE_p_ManifoldBox) {
        JManifoldJNI.manifold_destruct_box(SWIGTYPE_p_ManifoldBox.getCPtr(b))
    }

    fun destructRect(b: SWIGTYPE_p_ManifoldRect) {
        JManifoldJNI.manifold_destruct_rect(SWIGTYPE_p_ManifoldRect.getCPtr(b))
    }

    fun deleteManifold(m: SWIGTYPE_p_ManifoldManifold) {
        JManifoldJNI.manifold_delete_manifold(SWIGTYPE_p_ManifoldManifold.getCPtr(m))
    }

    fun deleteManifoldVec(ms: SWIGTYPE_p_ManifoldManifoldVec) {
        JManifoldJNI.manifold_delete_manifold_vec(SWIGTYPE_p_ManifoldManifoldVec.getCPtr(ms))
    }

    fun deleteCrossSection(cs: SWIGTYPE_p_ManifoldCrossSection) {
        JManifoldJNI.manifold_delete_cross_section(SWIGTYPE_p_ManifoldCrossSection.getCPtr(cs))
    }

    fun deleteCrossSectionVec(csv: SWIGTYPE_p_ManifoldCrossSectionVec) {
        JManifoldJNI.manifold_delete_cross_section_vec(SWIGTYPE_p_ManifoldCrossSectionVec.getCPtr(csv))
    }

    fun deleteSimplePolygon(p: SWIGTYPE_p_ManifoldSimplePolygon) {
        JManifoldJNI.manifold_delete_simple_polygon(SWIGTYPE_p_ManifoldSimplePolygon.getCPtr(p))
    }

    fun deletePolygons(p: SWIGTYPE_p_ManifoldPolygons) {
        JManifoldJNI.manifold_delete_polygons(SWIGTYPE_p_ManifoldPolygons.getCPtr(p))
    }

    fun deleteMeshGl(m: SWIGTYPE_p_ManifoldMeshGL) {
        JManifoldJNI.manifold_delete_meshgl(SWIGTYPE_p_ManifoldMeshGL.getCPtr(m))
    }

    fun deleteBox(b: SWIGTYPE_p_ManifoldBox) {
        JManifoldJNI.manifold_delete_box(SWIGTYPE_p_ManifoldBox.getCPtr(b))
    }

    fun deleteRect(b: SWIGTYPE_p_ManifoldRect) {
        JManifoldJNI.manifold_delete_rect(SWIGTYPE_p_ManifoldRect.getCPtr(b))
    }
}
