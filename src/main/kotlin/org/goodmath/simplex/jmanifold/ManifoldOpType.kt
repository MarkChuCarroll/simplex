/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.2.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.goodmath.simplex.jmanifold

class ManifoldOpType private constructor(val swigName: String, val swigValue: Int) {

    override fun toString(): String = swigName

    constructor(swigName: String): this(swigName, swigNext++) {}

    constructor(swigName: String, swigEnum: ManifoldOpType): this(swigName, swigEnum.swigValue) {}

    companion object {

        fun  swigToEnum(swigValue: Int): ManifoldOpType {
            if (swigValue < swigValues.size && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
                return swigValues[swigValue]
            for (i in 0..<swigValues.size) {
                if (swigValues[i].swigValue == swigValue) {
                    return swigValues[i]
                }
            }
            throw IllegalArgumentException ("No enum ManifoldOpType with value $swigValue")
        }


        private var swigNext: Int = 0

        val MANIFOLD_ADD = ManifoldOpType("MANIFOLD_ADD")
        val MANIFOLD_SUBTRACT = ManifoldOpType("MANIFOLD_SUBTRACT")
        val MANIFOLD_INTERSECT = ManifoldOpType("MANIFOLD_INTERSECT")
        val swigValues = mutableListOf(MANIFOLD_ADD, MANIFOLD_SUBTRACT, MANIFOLD_INTERSECT)
    }
}

