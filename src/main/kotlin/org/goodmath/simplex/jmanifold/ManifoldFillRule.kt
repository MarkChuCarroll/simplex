/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.2.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.goodmath.simplex.jmanifold

public final class ManifoldFillRule(val swigName: String, val swigValue: Int) {
    constructor(swigName: String): this(swigName, swigNext++)

    constructor(swigName: String, swigEnum: ManifoldFillRule): this(swigName, swigEnum.swigValue) {
        swigNext = this.swigValue+1
    }


    companion object {
        var swigNext: Int = 0
        val MANIFOLD_FILL_RULE_EVEN_ODD = ManifoldFillRule("MANIFOLD_FILL_RULE_EVEN_ODD")
        val MANIFOLD_FILL_RULE_NON_ZERO = ManifoldFillRule("MANIFOLD_FILL_RULE_NON_ZERO")
        val MANIFOLD_FILL_RULE_POSITIVE = ManifoldFillRule("MANIFOLD_FILL_RULE_POSITIVE")
        val MANIFOLD_FILL_RULE_NEGATIVE = ManifoldFillRule("MANIFOLD_FILL_RULE_NEGATIVE")

        val swigValues: List<ManifoldFillRule> = listOf(MANIFOLD_FILL_RULE_EVEN_ODD, MANIFOLD_FILL_RULE_NON_ZERO, MANIFOLD_FILL_RULE_POSITIVE, MANIFOLD_FILL_RULE_NEGATIVE)

        fun swigToEnum(swigValue: Int): ManifoldFillRule {
            if (swigValue < swigValues.size && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
                return swigValues[swigValue]
            for (i in 0..<swigValues.size) {
                if (swigValues[i].swigValue == swigValue) {
                    return swigValues[i]
                }
            }
            throw IllegalArgumentException("No enum ManifoldFillRule with value $swigValue")
        }

    }

  override fun toString(): String {
    return swigName
  }
}

